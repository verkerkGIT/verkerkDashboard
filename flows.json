[
    {
        "id": "e7a7e61768dadc02",
        "type": "tab",
        "label": "ABB",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5368e8a6e61eb499",
        "type": "tab",
        "label": "Multisensor",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "111803235e0e01f2",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "16c75729dbeec8c4",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "61a67eb06bbec7d0",
        "type": "tab",
        "label": "Flow 3",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "2924702c.b33a7",
        "type": "subflow",
        "name": "ui-table handler",
        "info": "# ui-table handler\nUniversal handler for ui-table.\n## features\n- buffer table data\n- add or update individual rows or cells of the table\n- delete rows\n- clear tableData\n- handle column width\n- handle column order\n- hide und unhide columns\n- hide and unhide rows\n- records row order\n- support for nested columns [(column groups)](http://tabulator.info/examples/4.7#column-groups)\n- support for child rows (_children) [(nested data trees)](http://tabulator.info/examples/4.7#tree)\n\nFor real life example see:\n\n**syslog server** for logfile like table with filters\n\n**remote device table** for dynamically updated table with context menues\n\n**irrigation system** for sortable rows\n\n## sending data to ui-tabel\n\n- sending an `array` as discribed in ui-table will replace the complete table and delete all table edits\n  \n  if `msg.keepEdits=true` is added the existing edits will be kept.\n- send an `object` containing the updated properties of a table row by sending msg.<tableDataProp>.\n\n  The table is updated using the `updateOrAddData` command. You can alter the command used by adding the `msg.tabulatorCommand` and `msg.tabulatorParameter`\n\n```\nmsg.tabulatorCommand=\"addData\";\nmsg.tabulatorParameter=[true];\n```\n## configuration\n- `tabulator` json formatted object containing configuration of the table. See ui-table for more details.\n- `property` property of the msg object that contains the data to be passed to ui-table. I.e. *state* `msg.state`\n- `index` index column to identify individual rows. Each message containing data must have a unique `msg.topic` to identify the row. Messages without this `msg.topic` will be droped. It is not nessesary but possible to display the index column in the table. Do not enable editing on this column otherwise you will loose the connection and another row will be added to the table as soon as a new message arrives!\n\n   Defaults to *$topic* `msg.state.$topic`\n- `maxRows`maximum number of rows held by table widget. If grater than **0** the amount of rows in ui-table is limited. For this to work the index row must be a Number. ´rows < currentID-maxRows´ will be deleted.\n- `maxStore`maximum number of rows stored by this node for replay if a client connects. If grater than **0** the amount of rows in flow context is limited. for this to work the index row must be a Number. ´rows < currentID-maxStore´ will be deleted.\n- `dashboard` name of the dashboard tab to only update the table if the dashboard is visible. If empty the table will be updated on every tab change and connect.\n- `context` configuration of context data. The subflow will save or cache data in the flows context using `$parent.`. \n   **tableData** caches the incoming data to restore it on `ui-control´ *change* messages.\n   **tableConfig** saves column width and order to save the interactive table layot\n   **tableEdit** saves edits on the table data otherwise it would be overwritten when new data arrives\n```json\n{\n    \"tableData\": {\n        \"name\": \"tableData\"\n    },\n    \"tableConfig\": {\n        \"name\": \"tableConfig\",\n        \"storage\": \"file\"\n    },\n    \"tableEdit\": {\n        \"name\": \"tableEdit\",\n        \"storage\": \"file\"\n    }\n}\n```\n\n## commands\ncommands can be passed by sending a object as `msg.payload`\n\n```json\n{\n    \"command\": \"delete\",\n    \"object\": \"columnOrder\"\n}\n```\n\n- `deleteTable` tableCache\n- `deleteRow` delete single row. `object` matching index property\n- `ignoreRow` delete single row and put it on an ignore list. `object` matching index property\n- `unIgnoreRow`remove row from the ignore list.  `object` matching index property\n- `unIgnoreRows`delte the ignore list. \n- `deleteRowOrder` delete custom row order\n- `deleteColumnOrder` delete custom column order\n  This is important if you add or delete columns in the tabulator config otherwise the columns most likely don`t show up\n- `deleteColumnWidth` delete custom column width\n- `columnHide` hide a column. `object` matching column field\n- `columnUnHide` unhide a column. `object` matching column field\n- `columnsUnHide` unhide all hidden columns.\n- `setMaxStore` set maximum amount of rows in cache\n- `setMaxDisplay` set maximum amout of rows in ui-table\n- `getTable` get table data (as displayed) as an array (on 2nd output)\n \n## background\nui-table warps the powerfull tabluator library.  This subflow makes it easier to unleash the powerfull features of ui-table",
        "category": "dashboard",
        "in": [
            {
                "x": 54,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 85,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 1
                    }
                ]
            },
            {
                "x": 360,
                "y": 136,
                "wires": [
                    {
                        "id": "5eb0bd6b.74b794",
                        "port": 2
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tabulator",
                "type": "json",
                "value": "{\"tabulator\":{\"responsiveLayout\":\"collapse\",\"responsiveLayoutCollapseStartOpen\":false,\"index\":\"$name\",\"layout\":\"fitColumns\",\"movableColumns\":true,\"groupBy\":\"\",\"columnResized\":\"function(column){     var newColumn = {         field: column._column.field,         visible: column._column.visible,         width: column._column.width,         widthFixed: column._column.widthFixed,         widthStyled: column._column.widthStyled     }; this.send({topic:this.config.topic,ui_control:{callback:'columnResized',columnWidths:newColumn}}); }\",\"columnMoved\":\"function(column, columns){     var newColumns=[];     columns.forEach(function (column) {         newColumns.push({'field': column._column.definition.field, 'title': column._column.definition.title});     });     this.send({topic:this.config.topic,ui_control:{callback:'columnMoved',columns:newColumns}}); }\",\"rowFormatter\":\"function(row){     var data = row.getData();     switch (data.$state) {         case \\\"lost\\\":             row.getElement().style.backgroundColor = \\\"#9e2e66\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"sleeping\\\":             row.getElement().style.backgroundColor = \\\"#336699\\\";             break;         case \\\"disconnected\\\":             row.getElement().style.backgroundColor = \\\"#cc3300\\\";             row.getElement().style.color = \\\"#a6a6a6\\\";             break;         case \\\"alert\\\":             row.getElement().style.backgroundColor = \\\"#A6A6DF\\\";             break;         case \\\"init\\\":             row.getElement().style.backgroundColor = \\\"#f2f20d\\\";             break;         case \\\"ready\\\":             row.getElement().style.backgroundColor = \\\"\\\";             row.getElement().style.color = \\\"\\\";             break;         } }\",\"columns\":[{\"formatter\":\"responsiveCollapse\",\"width\":30,\"minWidth\":30,\"align\":\"center\",\"resizable\":false,\"headerSort\":false,\"frozen\":true,\"title\":\"expand\",\"field\":\"expand\",\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {      var html = cell.getValue(); return html;  }\",\"title\":\"State\",\"field\":\"$stateIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"formatter\":\"function(cell, formatterParams, onRendered) {     var html = cell.getValue(); return html;  }\",\"title\":\"Signal\",\"field\":\"signalIcon\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"Name\",\"field\":\"$name\",\"width\":100,\"frozen\":true,\"headerVertical\":\"flip\"},{\"title\":\"State\",\"field\":\"$state\",\"width\":100,\"align\":\"center\",\"headerVertical\":\"flip\"},{\"title\":\"last-ready\",\"field\":\"lastSeenreadyFormatted\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Homie\",\"field\":\"$homie\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Platform\",\"field\":\"$implementation\",\"width\":100,\"align\":\"left\",\"headerVertical\":\"flip\"},{\"title\":\"Statistics\",\"columns\":[{\"title\":\"Interval\",\"field\":\"interval\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"outputFormat\":\"d hh:mm:ss\",\"inputFormat\":\"seconds\",\"invalidPlaceholder\":\"(unknown)\"},\"title\":\"Uptime\",\"field\":\"uptime\",\"formatter\":\"function(cell, formatterParams, onRendered){     var pad = function (num) {         return (\\\"0\\\"+num).slice(-2);     };     var secs = Number(cell.getValue());     if (Number.isNaN(secs)) return;     var minutes = Math.floor(secs / 60);     secs = secs%60;     var hours = Math.floor(minutes/60);     minutes = minutes%60;     var days = Math.floor(hours/24);     hours = hours%24;     if (days>0)         return days+\\\"d \\\"+pad(hours)+\\\":\\\"+pad(minutes);     else         return pad(hours)+\\\":\\\"+pad(minutes)+\\\":\\\"+pad(secs); }\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\"; else return; }\",\"legendColor\":\"#FFFFFF\",\"legendAlign\":\"center\"},\"title\":\"Signal\",\"field\":\"signal\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":2.5,\"max\":3.5,\"color\":[\"red\",\"green\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" V</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Supply\",\"field\":\"supply\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Battery\",\"field\":\"battery\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":0,\"max\":100000,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+(value/1024).toFixed(2)+\\\" kB</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"Memory\",\"field\":\"freeheap\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"target\":\"_blank\",\"min\":0,\"max\":100,\"color\":[\"red\",\"orange\",\"green\"],\"legend\":\"function (value) {     if (value>0)         return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" %</span>\\\";     else         return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU load\",\"field\":\"cpuload\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"},{\"formatterParams\":{\"min\":20,\"max\":60,\"color\":[\"green\",\"orange\",\"red\"],\"legend\":\"function (value) { if (value>0) return \\\"<span style='color:#FFFFFF;'>\\\"+value+\\\" °C</span>\\\"; else return; }\",\"legendColor\":\"#101010\",\"legendAlign\":\"center\"},\"title\":\"CPU temp\",\"field\":\"cputemp\",\"formatter\":\"progress\",\"width\":100,\"headerVertical\":\"flip\"}]},{\"title\":\"Firmware\",\"columns\":[{\"formatter\":\"link\",\"formatterParams\":{\"labelField\":\"$localip\",\"urlPrefix\":\"http://\",\"target\":\"_blank\"},\"title\":\"IP\",\"field\":\"$localip\",\"width\":100},{\"title\":\"mac\",\"field\":\"$mac\",\"width\":100},{\"title\":\"Accsess Point\",\"field\":\"SSID\",\"width\":100},{\"title\":\"Firmware\",\"field\":\"name\",\"width\":100},{\"title\":\"Version\",\"field\":\"version\",\"width\":100},{\"title\":\"Last Boot Cause\",\"field\":\"lastBootCause\",\"width\":100},{\"title\":\"Reset Reason\",\"field\":\"resetReason\",\"width\":100}]}]},\"customHeight\":12}",
                "ui": {
                    "icon": "font-awesome/fa-table",
                    "label": {
                        "en-US": "Tabulator"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableDataProp",
                "type": "str",
                "value": "row",
                "ui": {
                    "icon": "font-awesome/fa-tag",
                    "label": {
                        "en-US": "rowProperty"
                    }
                }
            },
            {
                "name": "tableIndex",
                "type": "str",
                "value": "$topic",
                "ui": {
                    "icon": "font-awesome/fa-indent",
                    "label": {
                        "en-US": "Index"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "json",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxRows",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-list-ol",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "bool",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "maxStore",
                "type": "num",
                "value": "0",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "dashboard",
                "type": "str",
                "value": "Remote Device Table",
                "ui": {
                    "icon": "font-awesome/fa-dashboard",
                    "label": {
                        "en-US": "Dashboard"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "env"
                        ]
                    }
                }
            },
            {
                "name": "tableContext",
                "type": "json",
                "value": "{\"tableData\":{\"name\":\"tableData\"},\"tableConfig\":{\"name\":\"tableConfig\",\"storage\":\"file\"},\"tableEdit\":{\"name\":\"tableEdit\",\"storage\":\"file\"}}",
                "ui": {
                    "icon": "font-awesome/fa-database",
                    "label": {
                        "en-US": "Context"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "json",
                            "env"
                        ]
                    }
                }
            }
        ],
        "color": "#3FADB5",
        "icon": "node-red-dashboard/ui_slider.png",
        "status": {
            "x": 360,
            "y": 34,
            "wires": [
                {
                    "id": "5eb0bd6b.74b794",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "bf76e2c388afe405",
        "type": "subflow",
        "name": "Toggler",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 780,
                "y": 320,
                "wires": [
                    {
                        "id": "c3ee0a3a1798a4a1",
                        "port": 0
                    }
                ]
            },
            {
                "x": 780,
                "y": 360,
                "wires": [
                    {
                        "id": "c3ee0a3a1798a4a1",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "402ec0456b47332d",
        "type": "subflow",
        "name": "SetEmail",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 160,
                "y": 440,
                "wires": [
                    {
                        "id": "cefad36aa8fb3875"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 880,
                "y": 440,
                "wires": [
                    {
                        "id": "3db9baae328ce4c6",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "ab81a7027a50d0cf",
        "type": "subflow",
        "name": "Alert",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 540,
                "y": 320,
                "wires": [
                    {
                        "id": "2a06a87f6c91770a",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c86e277274d8a2dc",
        "type": "subflow",
        "name": "Set nominal value",
        "info": "",
        "category": "",
        "in": [],
        "out": [
            {
                "x": 640,
                "y": 360,
                "wires": [
                    {
                        "id": "96a0ee556239930e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "a2a56583cec3087e",
        "type": "subflow",
        "name": "Three phase chart",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 240,
                "y": 320,
                "wires": [
                    {
                        "id": "c7fad826dafbe77c"
                    }
                ]
            }
        ],
        "out": [],
        "env": [
            {
                "name": "MAX_VALUE",
                "type": "num",
                "value": "100",
                "ui": {
                    "icon": "font-awesome/fa-angle-double-up",
                    "label": {
                        "en-US": "Max value"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "num",
                            "env"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#3FADB5",
        "icon": "font-awesome/fa-bar-chart-o"
    },
    {
        "id": "17e2c69396d6a108",
        "type": "junction",
        "z": "e7a7e61768dadc02",
        "x": 1820,
        "y": 360,
        "wires": [
            [
                "f3d2daf12aa411a1",
                "db33a96a33108301",
                "ee680228fc4da434"
            ]
        ]
    },
    {
        "id": "820f6c420405fc51",
        "type": "junction",
        "z": "e7a7e61768dadc02",
        "x": 240,
        "y": 1380,
        "wires": [
            [
                "cc380b4471ae4b88",
                "92000d3ba4f18216",
                "b113e65eda726113",
                "d29e88bfcdb392ab"
            ]
        ]
    },
    {
        "id": "64c89f932c202414",
        "type": "junction",
        "z": "e7a7e61768dadc02",
        "x": 560,
        "y": 1920,
        "wires": [
            [
                "1d4d7c6d99de9f45"
            ]
        ]
    },
    {
        "id": "858ba84d02e4df26",
        "type": "ui_base",
        "theme": {
            "name": "theme-custom",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#b4113d",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#ff0000",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#b4113d",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#4B7930",
                    "value": "#b4113d",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#b4113d",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#282929",
                    "edited": true
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#eb275c",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#b4113d",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Verkerk Energy Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "e109d36b633b2a51",
        "type": "modbus-client",
        "name": "Regelkast",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.94.31",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "d4bddd295f6b8511",
        "type": "ui_tab",
        "name": "Groepen",
        "icon": "dashboard",
        "order": 2,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2d13595d48aae4f6",
        "type": "ui_group",
        "name": "L1,L2,L3",
        "tab": "d4bddd295f6b8511",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": true,
        "className": ""
    },
    {
        "id": "3f443d245e239542",
        "type": "ui_group",
        "name": "L1",
        "tab": "d4bddd295f6b8511",
        "order": 4,
        "disp": true,
        "width": "10",
        "collapse": true,
        "className": ""
    },
    {
        "id": "10627b09b564e367",
        "type": "ui_group",
        "name": "",
        "tab": "d4bddd295f6b8511",
        "order": 5,
        "disp": true,
        "width": "10",
        "collapse": true,
        "className": ""
    },
    {
        "id": "625aeb6ac8e0d899",
        "type": "ui_group",
        "name": "Grafiek",
        "tab": "d4bddd295f6b8511",
        "order": 6,
        "disp": true,
        "width": "10",
        "collapse": true,
        "className": ""
    },
    {
        "id": "e64cb74f6622eebb",
        "type": "modbus-client",
        "name": "Meterkast",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.94.30",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "1e6f6ca7cdebe52b",
        "type": "ui_group",
        "name": "Selecteer2",
        "tab": "d4bddd295f6b8511",
        "order": 2,
        "disp": false,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b3f6b44ff04ed6ee",
        "type": "ui_tab",
        "name": "MultiSensor",
        "icon": "dashboard",
        "order": 7,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d37fa3fb37fe02ef",
        "type": "ui_group",
        "name": "Sensors",
        "tab": "b3f6b44ff04ed6ee",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "85bfc516b6fff0d0",
        "type": "ui_group",
        "name": "Geluid / Beweging",
        "tab": "b3f6b44ff04ed6ee",
        "order": 2,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b279ac3a27a8f877",
        "type": "ui_group",
        "name": "WiFi",
        "tab": "b3f6b44ff04ed6ee",
        "order": 3,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d998440e2b8b67b3",
        "type": "ui_tab",
        "name": "Localisatie",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cc191a97858a5cf5",
        "type": "ui_group",
        "name": "Gebuikers",
        "tab": "d998440e2b8b67b3",
        "order": 1,
        "disp": true,
        "width": "10",
        "collapse": false,
        "className": ""
    },
    {
        "id": "3dfa3ccc55128d14",
        "type": "ui_group",
        "name": "Groepen",
        "tab": "3a27008dcc433ede",
        "order": 7,
        "disp": true,
        "width": 30,
        "collapse": false,
        "className": ""
    },
    {
        "id": "3a27008dcc433ede",
        "type": "ui_tab",
        "name": "Kosten en Historie",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "07e861757daa32cb",
        "type": "ui_tab",
        "name": "Totaal",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5d6053dc4dae5e70",
        "type": "ui_group",
        "name": "Regelkast RK1",
        "tab": "07e861757daa32cb",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f153a68c5d515033",
        "type": "ui_group",
        "name": "Meterkast KK LK",
        "tab": "07e861757daa32cb",
        "order": 2,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "07da38dabb79ce59",
        "type": "ui_group",
        "name": "Totaal L123",
        "tab": "07e861757daa32cb",
        "order": 5,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "24f987a86860e208",
        "type": "ui_group",
        "name": "Regelkast RK1 Totaal",
        "tab": "07e861757daa32cb",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "93b9fb66d51f7df0",
        "type": "ui_group",
        "name": "Meterkast KK LK Totaal",
        "tab": "07e861757daa32cb",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "229115e6750f477a",
        "type": "ui_group",
        "name": "Weer",
        "tab": "07e861757daa32cb",
        "order": 7,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "531968520caaaced",
        "type": "ui_group",
        "name": "Energie",
        "tab": "07e861757daa32cb",
        "order": 8,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c31761829150255e",
        "type": "ui_tab",
        "name": "VSS - KNX",
        "icon": "dashboard",
        "order": 4,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "a150eb2db750140b",
        "type": "ui_group",
        "name": "Details",
        "tab": "c31761829150255e",
        "order": 2,
        "disp": true,
        "width": "14",
        "collapse": false,
        "className": ""
    },
    {
        "id": "2b01170a9ec02c1c",
        "type": "knxUltimate-config",
        "host": "192.168.94.196",
        "port": "3671",
        "physAddr": "15.15.255",
        "hostProtocol": "TunnelUDP",
        "suppressACKRequest": false,
        "csv": "",
        "KNXEthInterface": "Auto",
        "KNXEthInterfaceManuallyInput": "",
        "statusDisplayLastUpdate": true,
        "statusDisplayDeviceNameWhenALL": true,
        "statusDisplayDataPoint": false,
        "stopETSImportIfNoDatapoint": "stop",
        "loglevel": "error",
        "name": "KNX Gateway",
        "localEchoInTunneling": true,
        "delaybetweentelegrams": "50",
        "delaybetweentelegramsfurtherdelayREAD": "1",
        "ignoreTelegramsWithRepeatedFlag": false,
        "keyringFileXML": "",
        "autoReconnect": true
    },
    {
        "id": "e17dd53ddf6d2008",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.94.25",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "cd8c77187d64ce96",
        "type": "modbus-client",
        "name": "VSS kWh",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.94.41",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "4c7a2afe4e5b67d1",
        "type": "ui_group",
        "name": "Totaal",
        "tab": "07e861757daa32cb",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "cff9e3590a3f1841",
        "type": "ui_group",
        "name": "Control",
        "tab": "07e861757daa32cb",
        "order": 9,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "dfda6830323e39d4",
        "type": "ui_group",
        "name": "Koffie automaat",
        "tab": "07e861757daa32cb",
        "order": 10,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "c046c69f0bc31d6b",
        "type": "ui_group",
        "name": "Plattegrond",
        "tab": "c31761829150255e",
        "order": 1,
        "disp": true,
        "width": 20,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5eb0bd6b.74b794",
        "type": "function",
        "z": "2924702c.b33a7",
        "name": "handle tableData",
        "func": "var status = {fill:\"red\",shape:\"dot\",text: \"payload \"};\nvar tableIndex = env.get(\"tableIndex\") || \"$topic\";\nvar tableDataProp = env.get(\"tableDataProp\") || \"row\";\nvar tableContext = env.get(\"tableContext\");\nvar dashboard = env.get(\"dashboard\");\nvar maxRows = env.get(\"maxRows\") || 0;\nvar maxStore = env.get(\"maxStore\") || 0;\n\nif (!tableContext.hasOwnProperty(\"tableData\") || !tableContext.hasOwnProperty(\"tableConfig\")) {\n    status.text=\"tableContext not defined\";\n    node.error(status.text);\n    return [{payload:status},null];\n}\n\n// context store to cache table data (memoryOnly prefered)\nvar tableData = flow.get(\"$parent.\"+tableContext.tableData.name,tableContext.tableData.storage);\nif (tableData===undefined) {\n    node.warn(\"[ui-table handler] tableData initialized!\");\n    tableData={};\n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n}\n\n// context Store to save table configuration (file)\nvar tableConfig = flow.get(\"$parent.\"+tableContext.tableConfig.name,tableContext.tableConfig.storage);\nif (tableConfig===undefined) {\n    node.warn(\"[ui-table handler] tableConfig initialized!\");\n    tableConfig={ResponsiveLayout:true};\n    flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n}\n\nif (tableConfig.hasOwnProperty(\"maxStore\")) maxStore=tableConfig.maxStore;\nif (tableConfig.hasOwnProperty(\"maxRows\")) maxRows=tableConfig.maxRows;\n\n// context Store to save table configuration (file)\nvar tableEdit;\nif (tableContext.hasOwnProperty(\"tableEdit\")) {\n    tableEdit = flow.get(\"$parent.\"+tableContext.tableEdit.name,tableContext.tableEdit.storage);\n    if (tableEdit===undefined) {\n        node.warn(\"[ui-table handler] tableEdit initialized!\");\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n}\n\n// function to merge partial data into existing table row\nvar mergeObject = function (destination, source, filter) {\n    for (let currentSource in source) {\n        if (source.hasOwnProperty(currentSource)) {\n            if (filter!==undefined && tableEdit && tableEdit.hasOwnProperty(filter) && tableEdit[filter].hasOwnProperty(currentSource)) {\n                destination[currentSource]= tableEdit[filter][currentSource];\n                source[currentSource]=tableEdit[filter][currentSource];\n            } else {\n                destination[currentSource]= source[currentSource];\n            }\n        }    \n    }\n    return source;\n};\n\n// merge edits into a destination object respecting _children\nvar mergeEdits = function(destination) {\n    \n    var mergeChildEdits = function(children) {\n        children.forEach(child => {\n            if (child.hasOwnProperty(tableIndex) && tableEdit.hasOwnProperty(child[tableIndex])) {\n//                node.warn([\"mergeChild\",child])\n                Object.keys(tableEdit[child[tableIndex]]).forEach(edit => {\n                    if (child.hasOwnProperty(edit)) {\n                        child[edit]=tableEdit[child[tableIndex]][edit];\n//                        node.warn([\"mergeChild edit \",edit,child[edit]])\n                    }\n                });\n            }\n            if (child.hasOwnProperty(\"_children\")) {\n                mergeChildEdits(child._children);\n            }\n        })\n    }\n    \n\n    Object.keys(destination).forEach(row => {\n        if (destination[row].hasOwnProperty(tableIndex)) {\n            if (tableEdit.hasOwnProperty(row)) {\n                Object.keys(tableEdit[row]).forEach(edit => {\n                    destination[row][edit]=tableEdit[row][edit];\n                });\n            }\n            if (destination[row].hasOwnProperty(\"_children\")) {\n                mergeChildEdits(destination[row]._children);\n            }\n       }\n    });\n}\n\n// deep search for a column including nested columns\nvar searchTabulatorColumn = function (columns,key,match) {\n    var result;\n    for (let column of columns) {\n        if (column.hasOwnProperty(\"columns\")) {\n            result = searchTabulatorColumn(column.columns,key,match);\n            if (result!==undefined) return result;\n        } else if (column.hasOwnProperty(key) && column[key]===match) {\n            return column;\n        }\n    }\n};\n\n// command message to update add or update data on ui-table\nvar msgToTable={};\nmsgToTable.payload={\n    \"command\":msg.tabulatorCommand || \"updateOrAddData\",\n    \"arguments\": [],\n    \"returnPromise\": false\n};\n\n// store data in tableData\nif (msg.hasOwnProperty(tableDataProp)) {\n    // store data for later recover\n    if (!msg.hasOwnProperty(\"topic\")) { // check if index existst\n        status.text=\"msg.topic not defined!\";\n        return [{payload:status},null];\n    }\n    if (!tableData.hasOwnProperty(msg.topic)){ // first seen\n        if (maxRows>0 && Object.keys(tableData).lenght===0) {\n            tableConfig.currentFirstRow=msg.topic;\n        }\n        tableData[msg.topic]={};\n        if (tableEdit && tableEdit.hasOwnProperty(msg.topic)) { // table edits available!\n            Object.keys(tableEdit[msg.topic]).forEach((key) => {\n                msg[tableDataProp][key]=tableEdit[msg.topic][key];\n                tableData[msg.topic][key]=tableEdit[msg.topic][key];\n            })\n        }\n        if (maxStore>0 && typeof msg.topic === \"number\") { // limit rows in tableData\n            let rowKeys = Object.keys(tableData);\n            if (rowKeys.length>maxStore) {\n                for (let i=0; i<(rowKeys.length-maxStore); i++) {\n                    delete tableData[rowKeys[i]];\n                }\n            }\n        }\n    }\n    if (!tableData[msg.topic].hasOwnProperty(tableIndex)) tableData[msg.topic][tableIndex]=msg.topic;\n    msg[tableDataProp]=mergeObject(tableData[msg.topic],msg[tableDataProp],msg.topic);\n    msg[tableDataProp][tableIndex]=msg.topic;\n    msgToTable.payload.arguments=[[msg[tableDataProp]]];\n    // add aditional parameters\n    if (msg.hasOwnProperty(\"tabulatorParameter\") && Array.isArray(msg.tabulatorParameter)) {\n        for (let arg in msg.tabulatorParameter) msgToTable.payload.arguments.push(arg);\n    }\n    // delete rows if rows exceed maxRows\n    /*\n    if (maxRows>0 && tableConfig.hasOwnProperty(\"currentFirstRow\") && typeof tableData[msg.topic][tableIndex]===\"number\") {\n        //node.warn([maxRows,tableConfig.hasOwnProperty(\"currentFirstRow\"),typeof tableData[msg.topic][tableIndex],tableConfig.currentFirstRow,tableData[msg.topic][tableIndex]-maxRows])\n        if (tableConfig.currentFirstRow<tableData[msg.topic][tableIndex]-maxRows) {\n            node.warn([\"maxRowExeeded\",tableConfig.currentFirstRow]);\n            node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [tableConfig.currentFirstRow],\"returnPromise\": false}},null]);\n            tableConfig.currentFirstRow++;\n        }\n    }*/\n    if (maxRows>0 && typeof tableData[msg.topic][tableIndex]===\"number\" && msg.topic-maxRows>0) {\n        node.send([null,{payload:{\"command\":\"deleteRow\",\"arguments\": [msg.topic-maxRows],\"returnPromise\": false}},null]);\n    }\n    status.fill=\"green\";\n    status.text=msg.topic+\" updated\";\n    return [{payload:status},msgToTable,null];\n} if (msg.payload===\"connect\" || (msg.payload===\"change\" && msg.name===dashboard) || (msg.hasOwnProperty(\"payload\") && msg.payload.hasOwnProperty(\"command\"))) { \n    if (!msg.hasOwnProperty(\"ui_control\")) {\n        msg.ui_control = env.get('tabulator');\n        status.text+=\" ui_control added\";\n    }\n    //process commands\n    //node.warn({\"command\":msg.payload.command,\"msg\":msg,\"object\":msg.payload.object})\n    if (msg.payload.hasOwnProperty(\"command\") && msg.payload.command!=='getTable') {\n        status.fill=\"blue\";\n        switch(msg.payload.command) {\n            case 'deleteTable':\n                flow.set(\"$parent.\"+tableContext.tableData.name,undefined,tableContext.tableData.storage);\n                tableData={};\n                status.text=\"tabledata deleted\";\n                node.warn(\"[ui-table handler] \"+\"tabledata deleted\");\n                break;\n            case 'deleteRow':\n            case 'deleteDevice':\n                var deleteRow = function(id) {\n                    // check if row is in root\n                    if (tableData.hasOwnProperty(id)) {\n                        delete tableData[id]\n                        return true;\n                    }\n                    // check if row is a child\n                    let deleteChildRow = function(children, id) {\n                        for(let i = 0; i < children.length; i++){\n                            if (children[i].hasOwnProperty(tableIndex) && children[i][tableIndex]===id) {\n                                children.splice(i, 1); \n                                return true; \n                            }\n                            if (children[i].hasOwnProperty(\"_children\")) {\n                                if (deleteChildRow(children[i]._children,id)) {\n                                    if (children[i]._children.length === 0) {\n                                        delete children[i]._children;\n                                    }\n                                    return true;\n                                }\n                            }\n                        }\n                        return false;\n                    };\n                    \n                    for (let row in tableData) {\n                        if (tableData[row].hasOwnProperty(\"_children\")) {\n                            if (deleteChildRow(tableData[row]._children,id)) return true;\n                        }\n                    }\n                    return false;\n                }\n                \n                if (deleteRow(msg.payload.object)) {\n                    status.text=msg.payload.object+\" deleted\";\n                } else {\n                    status.fill=\"yellow\";\n                    status.text=msg.payload.object+\" undefined\";\n                }\n                break;\n            case 'ignoreRow':\n            case 'ignoreDevice':\n                if (tableData.hasOwnProperty(msg.payload.object)) {\n                    delete tableData[msg.payload.object];\n                    status.text=msg.payload.object+\" will be ignored\";\n                    if (!tableConfig.hasOwnProperty('ignoreDevice')) tableConfig.ignoreDevice={};\n                    tableConfig.ignoreDevice[msg.payload.object]=true;\n                }\n                break;\n            case 'unIgnoreRow':\n            case 'unIgnoreDevice':\n                if (tableConfig.hasOwnProperty('ignoreDevice')) {\n                    delete tableConfig.ignoreDevice[msg.payload.object];\n                }\n                break;\n            case 'unIgnoreRows':\n            case 'unIgnoreDevices':\n                delete tableConfig.ignoreDevice;\n                break;\n            case 'updateData':\n                status.text=\"column \"+msg.payload.column+\" updated\";\n                delete msg.ui_control;\n                return [{payload:status},msg];\n            case 'updateTable':\n                status.text=msg.payload.command+\": \";\n                break;\n            case 'columnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=false;\n                break;\n            case 'columnUnHide':\n                if (!tableConfig.hasOwnProperty('columnVisible')) tableConfig.columnVisible={};\n                tableConfig.columnVisible[msg.payload.object]=true;\n                break;\n            case 'columnsUnHide':\n                for (let column in tableConfig.columnVisible) {\n                    if (tableConfig.columnVisible.hasOwnProperty(column)) tableConfig.columnVisible[column]=true;\n                }\n                break;\n            case 'refreshTable':\n                break;\n            case 'deleteColumnOrder':\n            case 'restoreColumnOrder':\n                delete tableConfig.columns;\n                break;\n            case 'deleteColumnWidth':\n            case 'resetColumnWidth':\n                delete tableConfig.columnWidths;\n                break;\n            case 'setResponsiveLayout':\n                tableConfig.ResponsiveLayout=!tableConfig.ResponsiveLayout;\n                break;\n            case 'deleteRowOrder':\n                delete tableConfig.rowOrder;\n                break;\n            case 'setMaxStore':\n                tableConfig.maxStore=msg.payload.object;\n                maxStore=msg.payload.object;\n                break;\n            case 'setMaxRows':\n                tableConfig.maxRows=msg.payload.object;\n                maxRows=msg.payload.object;\n                break;\n            default:\n                status.fill=\"red\";\n                status.text=\"unknown command \"+msg.payload.command;\n                node.warn(\"[ui-table handler] \"+status.text);\n                break;\n        }\n        flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n        node.send([{payload:status},null,null]);\n    }\n\n    // crawl through tabulator arrays and updated user defined values\n    var crawlTabulator = function (columns,match,config,property) {\n        for (let column of columns) {\n            if (column.hasOwnProperty(\"columns\")) {\n                crawlTabulator(column.columns,match,config,property);\n            } else if (config.hasOwnProperty(column[match])) column[property]=config[column.field];\n        }\n    };\n    \n    // restore custom column width\n    if (tableConfig.hasOwnProperty(\"columnWidths\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnWidths,\"width\");\n    }\n    \n    // restore custom column hide/show\n    if (tableConfig.hasOwnProperty(\"columnVisible\") && msg.hasOwnProperty(\"ui_control\")) {\n        crawlTabulator(msg.ui_control.tabulator.columns,\"field\",tableConfig.columnVisible,\"visible\");\n    }\n    \n    // restore custom responsive / standard view\n    if (tableConfig.hasOwnProperty(\"ResponsiveLayout\")) {\n        if (!tableConfig.ResponsiveLayout) {\n            msg.ui_control.tabulator.responsiveLayout=false;\n        }\n        msg.ui_control.tabulator.columns.forEach((column,index) => {\n            if (column.formatter===\"responsiveCollapse\") { // hide expand column on any position\n                column.visible=tableConfig.ResponsiveLayout;\n                return;\n            }\n        });\n    }\n\n    // sort columns\n    if (tableConfig.hasOwnProperty(\"columns\") && msg.hasOwnProperty(\"ui_control\") && msg.ui_control.hasOwnProperty(\"tabulator\")) {\n        var addedColumns = 0;\n        var sortColumnsByLayout = function (sortColumns, columnsLayout, targetColumns) {\n            for (var layoutColumn=0;  layoutColumn<columnsLayout.length; layoutColumn++) {\n                for (var sortColumn in sortColumns) {\n                    if (sortColumns[sortColumn].hasOwnProperty(\"columns\")) {\n                        targetColumns.push({\"title\":sortColumns[sortColumn].title, \"columns\":[]});\n                        sortColumnsByLayout(sortColumns[sortColumn].columns,columnsLayout,targetColumns[targetColumns.length-1].columns);\n                        layoutColumn=addedColumns; // jump forward after childes added\n                    } else {\n                        if (columnsLayout[layoutColumn].field===sortColumns[sortColumn].field){\n                            targetColumns.push(sortColumns[sortColumn]);\n                            addedColumns++;\n                            break;\n                        }\n                    }\n                }\n            }\n        };                 \n        var newColumns=[];\n        sortColumnsByLayout(msg.ui_control.tabulator.columns,tableConfig.columns,newColumns);\n        msg.ui_control.tabulator.columns=newColumns;\n    }\n\n    // restore stored lines after connect\n\n    let command = msg.payload.command;\n    var tableArray;\n    if (command===\"getTable\") {\n        msg.payload.tableArray=[];\n        tableArray=msg.payload.tableArray\n    } else {\n        msg.payload=[];\n        tableArray=msg.payload;\n    }\n    \n    var pushRowData = function(rowData) {\n        // ignore rows in ignoreRows array\n        if (tableConfig && tableConfig.hasOwnProperty(\"ignoreDevice\") && tableConfig.ignoreDevice[rowData]) {\n            // do nothing\n        } else {\n            // merge edits into table\n            if (tableEdit && tableEdit.hasOwnProperty(rowData)) {\n                let tableRow = RED.util.cloneMessage(tableData[rowData]);\n                Object.keys(tableEdit[rowData]).forEach((field) => {\n                    tableRow[field]=tableEdit[rowData][field];\n                });\n                tableArray.push(tableRow);\n            } else {\n                tableArray.push(tableData[rowData]);\n            }\n        }\n    }\n    \n    if (tableConfig.hasOwnProperty(\"rowOrder\")) {\n        // first check if new rows exits which are not in rowOrder\n        Object.keys(tableData).forEach((key) => {\n            if (tableConfig.rowOrder.indexOf(tableData[key][tableIndex])<0) {\n                tableConfig.rowOrder.push(tableData[key][tableIndex]); // add row to the end of rowOrder\n            }\n        });\n        tableConfig.rowOrder.forEach((value,index) => {\n            node.warn([\"pushRowOrder\",value,tableData.hasOwnProperty(value),tableData[value]]);\n            if (tableData.hasOwnProperty(value)) { // push rows in rowOrder sequence\n                pushRowData(value);\n            } else { // delete not existing rows from rowOrder\n                tableConfig.rowOrder.splice(index,1)\n            }\n       });\n    } else {\n        for (let rowData in tableData) {\n            pushRowData(rowData);\n        }\n    }\n    // store the first index if maxRows limits amount of displayed lines\n    if (maxRows>0 && tableData) {\n        let tableKeys=Object.keys(tableData);\n        if (tableKeys.length>0 && typeof tableData[tableKeys[0]][tableIndex] === \"number\") {\n            tableConfig.currentFirstRow=tableData[tableKeys[0]][tableIndex];\n        }\n    }\n    \n    if (command=='getTable'){\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows emitted\";\n        return [{payload:status},null,msg];\n    } else {\n        status.fill=\"blue\";\n        status.text+=\" \"+tableArray.length+\" rows restored\";\n        return [{payload:status},msg,[{topic:\"maxRows\",payload:maxRows},{topic:\"maxStore\",payload:maxStore}]];\n    }\n} if (msg.hasOwnProperty(\"ui_control\")) {\n    // callback from tabulator\n    status.fill=\"blue\";\n    status.text=\"callback \"+msg.ui_control.callback;\n    switch(msg.ui_control.callback) {\n        case \"columnResized\": // save new column width\n            if (tableConfig.columnWidths===undefined) tableConfig.columnWidths={};\n            tableConfig.columnWidths[msg.ui_control.columnWidths.field]=msg.ui_control.columnWidths.width;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=msg.ui_control.columnWidths.field+\"=\"+msg.ui_control.columnWidths.width+\"px\";\n            break;\n        case \"columnMoved\": // save new column order\n            if (tableConfig.columns===undefined) tableConfig.columns=[];\n            tableConfig.columns=msg.ui_control.columns;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new column order\";\n            break;\n        case \"cellEdited\":\n            if (tableEdit) {\n                if (!tableEdit.hasOwnProperty(msg[tableIndex])) tableEdit[msg[tableIndex]]={};\n                tableEdit[msg[tableIndex]][msg.field] = msg.payload; // save data and mark as edited field\n                flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n                mergeEdits(tableData);\n                flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n                status.text=msg[tableIndex]+\" \"+msg.field+\" edited to \"+msg.payload;\n                msg[tableDataProp]={};\n                msg[tableDataProp][tableIndex]=msg[tableIndex];\n                msg[tableDataProp][msg.field]=msg.payload;\n                msgToTable.payload.arguments=[[msg[tableDataProp]]];\n                node.send([{payload:status},null,msg]); // was node.send([{payload:status},msgToTable,msg]);\n            } else {\n                node.error(\"[ui-table handler] no tableEdit store defined!\")\n            }\n            break;\n        case \"rowContext\":\n            msg.ignoredDevices=[];\n            for (let rowData in tableConfig.ignoreDevice) {\n                if (tableConfig.ignoreDevice.hasOwnProperty(rowData)) {\n                    msg.ignoredDevices.push({\"text\":rowData,\"icon\":\"fa fa-plug\",\"topic\":\"unIgnoreDevice\",\"payload\":rowData})  \n                }\n            }\n            break;\n        case \"headerContext\":\n            msg.hiddenColumns=[];\n            let tabulatorConfig = env.get('tabulator');\n            for (let column in tableConfig.columnVisible) {\n                if (tableConfig.columnVisible.hasOwnProperty(column) &&\n                    !tableConfig.columnVisible[column]) {\n                    let configColumn=searchTabulatorColumn(tabulatorConfig.tabulator.columns,\"field\",column);\n                    let icon;\n                    if (configColumn.hasOwnProperty('title') && configColumn.title.toLowerCase().includes('</i>')) {\n                        // <i class='fa fa-star-half-o'></i> State\n                        let start=configColumn.title.indexOf(\"'fa \");\n                        let end=configColumn.title.indexOf(\"'\",start+1);\n                        icon=configColumn.title.substring(start+4,end);\n                    }\n                    msg.hiddenColumns.push({\"text\":column,\"icon\":icon,\"topic\":\"columnUnHide\",\"payload\":configColumn.field})  \n                }\n            }\n            break;\n        case \"rowMoved\":\n            if (tableConfig.rowOrder===undefined) tableConfig.rowOrder={};\n            tableConfig.rowOrder=msg.ui_control.rowOrder;\n            flow.set(\"$parent.\"+tableContext.tableConfig.name,tableConfig,tableContext.tableConfig.storage);\n            status.text=\"new row order\";\n            break;\n        default:\n            // if rowIndex exists pass complete object\n            if (msg.hasOwnProperty(tableIndex)) {\n                msg.rowData=tableData[msg[tableIndex]];\n            }\n            status.text=\"pass message\";\n    }\n    return [{payload:status},null,msg];\n} \nif (Array.isArray(msg.payload)) {\n    tableData={};\n    \n    msg.payload.forEach((row) => {\n        if (row.hasOwnProperty(tableIndex)) {\n            tableData[row[tableIndex]]=row;\n        }\n    });\n    if (msg.keepEdits) {\n        mergeEdits(tableData);\n    }\n\n    \n    flow.set(\"$parent.\"+tableContext.tableData.name,tableData,tableContext.tableData.storage);\n    if (tableContext.hasOwnProperty(\"tableEdit\") && !msg.keepEdits) {\n        tableEdit={};\n        flow.set(\"$parent.\"+tableContext.tableEdit.name,tableEdit,tableContext.tableEdit.storage);\n    }\n    status.fill=\"blue\"\n    status.text=\"table replaced \"+msg.payload.length+\" rows\";\n    return [{payload:status},msg,null];\n}    \n    \n// nothing to do bejond this point\nstatus.text+=\" [\"+msg.payload+\"]\";\nreturn [{payload:status},null];\n",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 192,
        "y": 85,
        "wires": [
            [],
            [],
            []
        ],
        "icon": "font-awesome/fa-table"
    },
    {
        "id": "c3ee0a3a1798a4a1",
        "type": "switch",
        "z": "bf76e2c388afe405",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 340,
        "wires": [
            [
                "6b6ce1587b4bf4ad"
            ],
            [
                "c705d24ca152de3f"
            ]
        ]
    },
    {
        "id": "c705d24ca152de3f",
        "type": "function",
        "z": "bf76e2c388afe405",
        "name": "function 4",
        "func": "msg.payload = 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 380,
        "wires": [
            [
                "d1497d5dba3065d0"
            ]
        ]
    },
    {
        "id": "6b6ce1587b4bf4ad",
        "type": "function",
        "z": "bf76e2c388afe405",
        "name": "function 5",
        "func": "msg.payload = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 300,
        "wires": [
            [
                "d1497d5dba3065d0"
            ]
        ]
    },
    {
        "id": "d1497d5dba3065d0",
        "type": "delay",
        "z": "bf76e2c388afe405",
        "name": "",
        "pauseType": "delay",
        "timeout": "500",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 330,
        "y": 340,
        "wires": [
            [
                "c3ee0a3a1798a4a1"
            ]
        ]
    },
    {
        "id": "02107943a5a2f35f",
        "type": "inject",
        "z": "bf76e2c388afe405",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0",
        "payloadType": "num",
        "x": 110,
        "y": 340,
        "wires": [
            [
                "d1497d5dba3065d0"
            ]
        ]
    },
    {
        "id": "cefad36aa8fb3875",
        "type": "function",
        "z": "402ec0456b47332d",
        "name": "Set label",
        "func": "msg.payload = \"\";\nvar file = global.get(\"latestJSON\").data;\nvar arrayIndex = global.get(\"arrayIndex\");\nmsg.email = file[arrayIndex].Email;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 440,
        "wires": [
            [
                "cd20ecfa97bc5f7e"
            ]
        ]
    },
    {
        "id": "cd20ecfa97bc5f7e",
        "type": "ui_text_input",
        "z": "402ec0456b47332d",
        "name": "",
        "label": "{{msg.email}}",
        "tooltip": "Email warning to:",
        "group": "10627b09b564e367",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "email",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 510,
        "y": 440,
        "wires": [
            [
                "2fb4decfaebd7f6e",
                "3db9baae328ce4c6"
            ]
        ]
    },
    {
        "id": "2fb4decfaebd7f6e",
        "type": "function",
        "z": "402ec0456b47332d",
        "name": "Clear input",
        "func": "msg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 560,
        "wires": [
            [
                "cd20ecfa97bc5f7e"
            ]
        ]
    },
    {
        "id": "3db9baae328ce4c6",
        "type": "function",
        "z": "402ec0456b47332d",
        "name": "latestEmail",
        "func": "global.set(\"latestEmail\", msg.payload);\nmsg.topic = \"latestEmail\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "2b7c546d816cb7b8",
        "type": "ui_text_input",
        "z": "ab81a7027a50d0cf",
        "name": "",
        "label": "Alert at",
        "tooltip": "Alert at:",
        "group": "10627b09b564e367",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 380,
        "y": 400,
        "wires": [
            [
                "75a5b49a86d08f37",
                "2a06a87f6c91770a"
            ]
        ]
    },
    {
        "id": "75a5b49a86d08f37",
        "type": "function",
        "z": "ab81a7027a50d0cf",
        "name": "Clear input",
        "func": "msg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 360,
        "wires": [
            [
                "2b7c546d816cb7b8"
            ]
        ]
    },
    {
        "id": "2a06a87f6c91770a",
        "type": "function",
        "z": "ab81a7027a50d0cf",
        "name": "Process input",
        "func": "if(global.get(\"showPower\"))\n{\n    msg.payload = msg.payload * 4.34;\n}\nif(global.get(\"isThreePhase\") && global.get(\"sumPhases\"))\n{\n   msg.payload = msg.payload / 3; \n}\nglobal.set(\"maxVal\", msg.payload);\nmsg.topic = \"maxVal\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "96a0ee556239930e",
        "type": "function",
        "z": "c86e277274d8a2dc",
        "name": "Process input",
        "func": "if(!global.get(\"showPower\"))\n{\n    msg.payload = msg.payload / 4\n}\nif(global.get(\"isThreePhase\") && global.get(\"sumPhases\"))\n{\n   msg.payload = msg.payload / 3; \n}\nmsg.payload = msg.payload * 2;\nglobal.set(\"nominalVal\", msg.payload);\nmsg.topic = \"nominalVal\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "ad3f04e7da8025bf",
        "type": "ui_text_input",
        "z": "c86e277274d8a2dc",
        "name": "",
        "label": "Nominal value (Enter to confirm)",
        "tooltip": "",
        "group": "1e6f6ca7cdebe52b",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "mode": "number",
        "delay": "0",
        "topic": "topic",
        "sendOnBlur": false,
        "className": "",
        "topicType": "msg",
        "x": 450,
        "y": 320,
        "wires": [
            [
                "2d0d6ce7689f59d1",
                "96a0ee556239930e"
            ]
        ]
    },
    {
        "id": "2d0d6ce7689f59d1",
        "type": "function",
        "z": "c86e277274d8a2dc",
        "name": "Clear input",
        "func": "msg.payload = \"\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "ad3f04e7da8025bf"
            ]
        ]
    },
    {
        "id": "c7fad826dafbe77c",
        "type": "function",
        "z": "a2a56583cec3087e",
        "name": "ProcessData",
        "func": "max = env.get(\"MAX_VALUE\");\npercentage1 = Math.round((msg.L1v/max) * 100);\npercentage2 = Math.round((msg.L2v/max) * 100);\npercentage3 = Math.round((msg.L3v/max) * 100);\nmsg.L1p = percentage1;\nmsg.L2p = percentage2;\nmsg.L3p = percentage3;\ncolour = [];\ncolour[0] = getcolor(percentage1);\ncolour[1] = getcolor(percentage2);\ncolour[2] = getcolor(percentage3);\nmsg.color = colour;\nfunction lerpColor(a, b, amount) \n    {\n        var ah = parseInt(a.replace(/#/g, ''), 16),\n        ar = ah >> 16, ag = ah >> 8 & 0xff, ab = ah & 0xff,\n        bh = parseInt(b.replace(/#/g, ''), 16),\n        br = bh >> 16, bg = bh >> 8 & 0xff, bb = bh & 0xff,\n        rr = ar + amount * (br - ar),\n        rg = ag + amount * (bg - ag),\n        rb = ab + amount * (bb - ab);\n        return (\"#\" + ((1 << 24) + (rr << 16) + (rg << 8) + rb).toString(16).slice(1)).slice(0, 7);\n    }\n  \n  function getcolor(value) \n  {\n    var percentage = parseFloat(value);\n    var color;\n    if (percentage < 50) {\n      amount = percentage / 50;\n      color = lerpColor(\"#00b500\", \"#e6e600\", amount);\n    } else {\n      amount = (percentage - 50) / 50;\n      color = lerpColor(\"#e6e600\", \"#ca3838\", amount);\n    }\n    return color;\n  }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 320,
        "wires": [
            [
                "ab4211f43a3c3852"
            ]
        ]
    },
    {
        "id": "ab4211f43a3c3852",
        "type": "ui_template",
        "z": "a2a56583cec3087e",
        "group": "07da38dabb79ce59",
        "name": "Bar chart",
        "order": 1,
        "width": 8,
        "height": 4,
        "format": "<style>\n.mainchart\n{\n    display: flex;\n    justify-content: center;\n    position: relative;\n    height: 100%;\n}\n.barchart {\n  display: flex;\n  position: relative;\n  align-items: flex-end;\n  height: 100%;\n  background-color: transparent;\n}\n\n.bar {\n    position: relative;\n    width: 60px;\n    transition: height 0.5s ease-out;\n    z-index: 3;\n    margin-right: 10px;\n}\n.greybar{\n    position: absolute;\n    z-index: 2;\n    width: 60px;\n    height: 100%;\n    background-color: #7f7f7f;\n    margin-right: 10px;\n    opacity: 0.5;\n}\n.greybar:nth-of-type(4) {\n    transform: translateX(0px);\n}\n.greybar:nth-of-type(5) {\n    transform: translateX(70px);\n}\n.greybar:nth-of-type(6) {\n    transform: translateX(140px);\n}\n.bar:last-child {\n    margin-right: 0;\n}\n\n.bar::after {\n    content: attr(data-value);\n    display: block;\n    text-align: center;\n    font-weight: bold;\n    margin-top: 0px;\n}\n\n.labels {\n    display: flex;\n    justify-content: center;\n    margin-top: 2px;\n}\n\n.labels span {\n    width: 70px;\n    text-align: center;\n    font-weight: bold;\n}\n</style>\n\n<html>\n<div class=\"mainchart\">\n  <div class=\"barchart\">\n    <div class=\"bar\" data-value=\"{{msg.L1v}}A\" style=\"height: {{msg.L1p}}%; background-color:{{msg.color[0]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L2v}}A\" style=\"height: {{msg.L2p}}%; background-color:{{msg.color[1]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L3v}}A\" style=\"height: {{msg.L3p}}%; background-color:{{msg.color[2]}}\"></div>\n    \n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n </div>\n</div>\n\n<div class=\"labels\">\n  <span>L1</span>\n  <span>L2</span>\n  <span>L3</span>\n</div>\n\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 580,
        "y": 320,
        "wires": [
            []
        ]
    },
    {
        "id": "390436a40819281a",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "MainProcess",
        "func": "var file = global.get(\"latestJSON\").data;\nvar arrayIndex = global.get(\"arrayIndex\");\nfunction ProcessValues(index)\n{\n\nif(global.get('showPower'))\n{\n    showPower = true;\n    msg.label = \"W\"\n}\nelse\n{\n    showPower = false;\n    msg.label = \"mA\";\n}\n\nvar dataInput = msg.payload;\nresult =\n[\n    Math.round(dataInput[index] * (!showPower ? 10 : global.get(\"L1_voltage\") / 100)),\n    Math.round(dataInput[index + 1] * (!showPower ? 10 : global.get(\"L2_voltage\") / 100)),\n    Math.round(dataInput[index + 2] * (!showPower ? 10 : global.get(\"L3_voltage\")/ 100)),\n    0\n];\nresult[3] = result[0] + result[1] + result[2];\nreturn result;\n\n\n}\nif(msg.topic == \"dropdown\")\n{\n    for(i = 0; i < file.length; i++)\n    {\n        if(file[i].Naam == msg.payload)\n        {\n            global.set(\"currentLabel\", file[i].Adr);\n            global.set(\"arrayIndex\", i);\n            global.set(\"isThreePhase\", file[i].isThreePhase);\n            return;\n        }\n    }\n}\nelse if(msg.topic == file[arrayIndex].KastNaam)\n{\n    msg.payload = ProcessValues(global.get(\"currentLabel\"));\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.v\n",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 380,
        "wires": [
            [
                "db412bc79ae71675",
                "45ef848c7a1173cd",
                "837e316e97fe4ac0",
                "cf22e7d3e006b5c1",
                "65fba8e1ef42232d"
            ]
        ]
    },
    {
        "id": "ee680228fc4da434",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "2d13595d48aae4f6",
        "order": 1,
        "width": 10,
        "height": 5,
        "gtype": "gage",
        "title": "L1",
        "label": "{{msg.label}}",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1930,
        "y": 340,
        "wires": []
    },
    {
        "id": "19a2f4c19be56f76",
        "type": "ui_dropdown",
        "z": "e7a7e61768dadc02",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "1e6f6ca7cdebe52b",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [],
        "payload": "",
        "topic": "dropdown",
        "topicType": "str",
        "className": "",
        "x": 1000,
        "y": 440,
        "wires": [
            [
                "390436a40819281a",
                "e2b724b25e56e8ae",
                "bcf4e86a4d8791d4",
                "c29d2f926e041242"
            ]
        ]
    },
    {
        "id": "db33a96a33108301",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "2d13595d48aae4f6",
        "order": 2,
        "width": 10,
        "height": 5,
        "gtype": "gage",
        "title": "L2",
        "label": "{{msg.label}}",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1930,
        "y": 380,
        "wires": []
    },
    {
        "id": "f3d2daf12aa411a1",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "2d13595d48aae4f6",
        "order": 3,
        "width": 10,
        "height": 5,
        "gtype": "gage",
        "title": "L3",
        "label": "{{msg.label}}",
        "format": "{{value}}",
        "min": 0,
        "max": "500",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1930,
        "y": 420,
        "wires": []
    },
    {
        "id": "db412bc79ae71675",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "L1",
        "func": "msg.payload = msg.payload[0];\nmsg.topic = \"L1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 340,
        "wires": [
            [
                "ee680228fc4da434",
                "288e64ad18050be2"
            ]
        ]
    },
    {
        "id": "45ef848c7a1173cd",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "L2",
        "func": "msg.payload = msg.payload[1];\nmsg.topic = \"L2\";\nif(!global.get(\"isThreePhase\"))\n{\n    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 380,
        "wires": [
            [
                "db33a96a33108301",
                "288e64ad18050be2"
            ]
        ]
    },
    {
        "id": "837e316e97fe4ac0",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "L3",
        "func": "msg.payload = msg.payload[2];\nmsg.topic = \"L3\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 420,
        "wires": [
            [
                "f3d2daf12aa411a1",
                "288e64ad18050be2"
            ]
        ]
    },
    {
        "id": "1a061ccb8bf8560c",
        "type": "ui_switch",
        "z": "e7a7e61768dadc02",
        "name": "",
        "label": "Laat vermogen zien",
        "tooltip": "",
        "group": "1e6f6ca7cdebe52b",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 790,
        "y": 480,
        "wires": [
            [
                "7b9e512bfa69fb64"
            ]
        ]
    },
    {
        "id": "7b9e512bfa69fb64",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "ShowPower",
        "func": "if(msg.payload == true)\n{\n    global.set(\"showPower\", true);\n}\nelse\n{\n    global.set(\"showPower\", false);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 500,
        "wires": [
            [
                "ed9c93d8ac7612af"
            ]
        ]
    },
    {
        "id": "7f0887a558adcc1f",
        "type": "ui_ui_control",
        "z": "e7a7e61768dadc02",
        "name": "",
        "events": "all",
        "x": 1940,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "65fba8e1ef42232d",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Select gauges",
        "func": "if(global.get(\"isThreePhase\"))\n{\n    msg.payload = {\"group\":{\"show\":[\"Groepen_L1,L2,L3\"]}};    \n}\nelse\n{\n    msg.payload = {\"group\":{\"hide\":[\"Groepen_L1,L2,L3\"]}};   \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 300,
        "wires": [
            [
                "7f0887a558adcc1f"
            ]
        ]
    },
    {
        "id": "4ae4b4c01c69dab7",
        "type": "ui_switch",
        "z": "e7a7e61768dadc02",
        "name": "",
        "label": "Sommeer fases",
        "tooltip": "",
        "group": "cff9e3590a3f1841",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 820,
        "y": 280,
        "wires": [
            [
                "081fbaf02fe40d42",
                "97f3e9161d132e9e",
                "57f8eacdeee7cfd2"
            ]
        ]
    },
    {
        "id": "e2b724b25e56e8ae",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Reset Graph",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 320,
        "wires": [
            [
                "c6dd6f3fdd1b3343"
            ]
        ]
    },
    {
        "id": "c6dd6f3fdd1b3343",
        "type": "link out",
        "z": "e7a7e61768dadc02",
        "name": "",
        "mode": "link",
        "links": [
            "19a6f6c9c8df4080",
            "eb37319f8f82db29"
        ],
        "x": 1325,
        "y": 320,
        "wires": []
    },
    {
        "id": "19a6f6c9c8df4080",
        "type": "link in",
        "z": "e7a7e61768dadc02",
        "name": "",
        "links": [
            "c6dd6f3fdd1b3343"
        ],
        "x": 1965,
        "y": 220,
        "wires": [
            [
                "5fdaf9dbe755ec1d"
            ]
        ]
    },
    {
        "id": "ed9c93d8ac7612af",
        "type": "rbe",
        "z": "e7a7e61768dadc02",
        "name": "Changed?",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1010,
        "y": 320,
        "wires": [
            [
                "e2b724b25e56e8ae",
                "bcf4e86a4d8791d4"
            ]
        ]
    },
    {
        "id": "081fbaf02fe40d42",
        "type": "rbe",
        "z": "e7a7e61768dadc02",
        "name": "Changed?",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload",
        "topi": "topic",
        "x": 1010,
        "y": 280,
        "wires": [
            [
                "e2b724b25e56e8ae",
                "bcf4e86a4d8791d4"
            ]
        ]
    },
    {
        "id": "38a4477b88564db6",
        "type": "file",
        "z": "e7a7e61768dadc02",
        "name": "",
        "filename": "filePath",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 800,
        "y": 400,
        "wires": [
            [
                "bcf4e86a4d8791d4"
            ]
        ]
    },
    {
        "id": "bcf4e86a4d8791d4",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Set gauge",
        "func": "var file = global.get(\"latestJSON\").data;\nvar powerfactor = 1;\nif(global.get(\"showPower\"))\n{\n    powerfactor = 1;\n}\nelse\n{\n    powerfactor = 4;\n}\nif(global.get(\"isThreePhase\") && global.get(\"sumPhases\"))\n{\n   powerfactor = powerfactor * 3; \n}\nvar max = (file[global.get(\"arrayIndex\")].Nom * powerfactor);\nmsg = {ui_control:{max:max}}\nreturn msg; ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 280,
        "wires": [
            [
                "17e2c69396d6a108",
                "c5b07028d4d7f33b"
            ]
        ]
    },
    {
        "id": "aa187f8706a9c7ad",
        "type": "ui_dropdown",
        "z": "e7a7e61768dadc02",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "1e6f6ca7cdebe52b",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Regelkast_RK1",
                "value": "Regelkast_RK1",
                "type": "str"
            },
            {
                "label": "Meterkast_KK_LK",
                "value": "Meterkast_KK_LK",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "dropdown",
        "topicType": "str",
        "className": "",
        "x": 300,
        "y": 440,
        "wires": [
            [
                "dea28c34456c5f77"
            ]
        ]
    },
    {
        "id": "c6b67f5578f53743",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "2d13595d48aae4f6",
        "name": "",
        "order": 4,
        "width": 0,
        "height": 0,
        "format": "<style>\n    body \n    {\n        background-image: url(\"/verkerk.png\");\n        background-repeat: no-repeat;\n        background-position: center bottom;\n        background-size: 30%;\n    }\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "global",
        "className": "",
        "x": 100,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "49b6e21678f8b2be",
        "type": "inject",
        "z": "e7a7e61768dadc02",
        "name": "Slider init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "false",
        "payloadType": "bool",
        "x": 640,
        "y": 360,
        "wires": [
            [
                "1a061ccb8bf8560c",
                "4ae4b4c01c69dab7",
                "57f8eacdeee7cfd2"
            ]
        ]
    },
    {
        "id": "7b3a2ab62cb20b3d",
        "type": "file in",
        "z": "e7a7e61768dadc02",
        "name": "Read File",
        "filename": "topic",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 310,
        "y": 400,
        "wires": [
            [
                "849c6398de5f681e"
            ]
        ]
    },
    {
        "id": "849c6398de5f681e",
        "type": "json",
        "z": "e7a7e61768dadc02",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 470,
        "y": 400,
        "wires": [
            [
                "9763836028f02eea"
            ]
        ]
    },
    {
        "id": "9763836028f02eea",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Set new value",
        "func": "var nominalVal = global.get(\"nominalVal\");\nvar maxVal = global.get(\"maxVal\");\nvar index = global.get(\"arrayIndex\");\nvar latestEmail = global.get(\"latestEmail\");\nmsg.filePath = global.get(\"defaultFolder\") + \"/NominalVals.json\";\nif(msg.topic == \"nominalVal\")\n{\n    msg.payload.data[index].Nom = nominalVal;\n}\nif(msg.topic == \"maxVal\")\n{\n    msg.payload.data[index].Max = maxVal;\n}\nif(msg.topic == \"latestEmail\")\n{\n    msg.payload.data[index].Email = latestEmail;\n}\nglobal.set(\"latestJSON\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 400,
        "wires": [
            [
                "38a4477b88564db6"
            ]
        ]
    },
    {
        "id": "dea28c34456c5f77",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Fill dropdown",
        "func": "var file = global.get(\"latestJSON\").data;\nmsg.options = new Array(100);\n\nglobal.set(\"arrayIndex\", 0);\nglobal.set(\"KastNaam\", msg.payload);\nfor(i = 0; i < file.length; i++)\n{\n    if(file[i].KastNaam == msg.payload)\n    {\n        msg.options[i] = file[i].Naam;  \n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 440,
        "wires": [
            [
                "19a2f4c19be56f76",
                "46d4f8fb5bbdac05"
            ]
        ]
    },
    {
        "id": "e21a48d6c4f1a3c2",
        "type": "inject",
        "z": "e7a7e61768dadc02",
        "name": "Data init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 360,
        "wires": [
            [
                "8d15bad4c169da1c"
            ]
        ]
    },
    {
        "id": "ff20c4eb5e16ae76",
        "type": "inject",
        "z": "e7a7e61768dadc02",
        "name": "Dropdown init",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "Regelkast_RK1",
        "payloadType": "str",
        "x": 120,
        "y": 480,
        "wires": [
            [
                "aa187f8706a9c7ad"
            ]
        ]
    },
    {
        "id": "ef92574876b8f1a5",
        "type": "delay",
        "z": "e7a7e61768dadc02",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 840,
        "wires": [
            [
                "9fe137335c0f66bb"
            ]
        ]
    },
    {
        "id": "9fe137335c0f66bb",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "ErrorLister",
        "func": "var file = global.get(\"latestJSON\").data;\nerrorList = [];\ndataIn = msg.payload;\nvar counter = 0;\nvar offset = 0;\nvar errorFlag = false;\nif(msg.topic == \"Meterkast_KK_LK\")\n{\n    counter = 25;\n    offset = 0;\n}\nelse if(msg.topic == \"Regelkast_RK1\")\n{\n    counter = 18;\n    offset = 25;\n}\nvar a = 0;\nfor(i = 0; i < counter; i++)\n{\n    if(file[i + offset].isThreePhase)\n    {\n        errorList[a] = {\"Active\" : false, \"Kast\" : file[i + offset].KastNaam, \"Groep\" : file[i + offset].Naam, \"Phase\" : \"L1\", \"Value\" : dataIn[file[i + offset].Adr] * 10, \"Max\" : file[i + offset].Max, \"MailTo\" : file[i + offset].Email};\n        if(dataIn[file[i + offset].Adr] * 10 > file[i + offset].Max)\n        {\n            errorList[a].Active = true;\n            errorFlag = true;\n        }\n        a++;\n        \n        errorList[a] = {\"Active\" : false, \"Kast\" : file[i + offset].KastNaam, \"Groep\" : file[i + offset].Naam, \"Phase\" : \"L2\", \"Value\" : dataIn[file[i + offset].Adr + 1] * 10, \"Max\" : file[i + offset].Max, \"MailTo\" : file[i + offset].Email};\n        if(dataIn[file[i + offset].Adr + 1] * 10 > file[i + offset].Max)\n        {\n            errorList[a].Active = true;\n            errorFlag = true;\n        }\n        a++;\n        \n        errorList[a] = {\"Active\" : false, \"Kast\" : file[i + offset].KastNaam, \"Groep\" : file[i + offset].Naam, \"Phase\" : \"L3\", \"Value\" : dataIn[file[i + offset].Adr + 2] * 10, \"Max\" : file[i + offset].Max, \"MailTo\" : file[i + offset].Email};\n        if(dataIn[file[i + offset].Adr + 2] * 10 > file[i + offset].Max)\n        {\n            errorList[a].Active = true;\n            errorFlag = true;\n        }\n    }\n    else\n    {\n        errorList[a] = {\"Active\" : false, \"Kast\" : file[i + offset].KastNaam, \"Groep\" : file[i + offset].Naam, \"Phase\" : \"L1\", \"Value\" : dataIn[file[i + offset].Adr] * 10, \"Max\" : file[i + offset].Max, \"MailTo\" : file[i + offset].Email};\n        if(dataIn[file[i + offset].Adr] * 10 > file[i + offset].Max)\n        {\n            errorList[a].Active = true;\n            errorFlag = true;\n        }\n    }\n    a++;\n}\nif(errorFlag)\n{\n    msg.payload = errorList;\n}\nelse\n{\n    msg.payload = null;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1090,
        "y": 860,
        "wires": [
            [
                "32d69952f8f76bb8"
            ]
        ]
    },
    {
        "id": "32d69952f8f76bb8",
        "type": "switch",
        "z": "e7a7e61768dadc02",
        "name": "Error?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1230,
        "y": 860,
        "wires": [
            [
                "e1dc93d32e27fb67"
            ]
        ]
    },
    {
        "id": "ce3bf0ecfbec6ffd",
        "type": "delay",
        "z": "e7a7e61768dadc02",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 880,
        "wires": [
            [
                "9fe137335c0f66bb"
            ]
        ]
    },
    {
        "id": "e1d799f1b525bd43",
        "type": "link in",
        "z": "e7a7e61768dadc02",
        "name": "",
        "links": [
            "c29d2f926e041242"
        ],
        "x": 35,
        "y": 440,
        "wires": [
            [
                "cfab506f4af2f7ba"
            ]
        ]
    },
    {
        "id": "c29d2f926e041242",
        "type": "link out",
        "z": "e7a7e61768dadc02",
        "name": "",
        "mode": "link",
        "links": [
            "e1d799f1b525bd43",
            "fa0c231e861ba5e2"
        ],
        "x": 1175,
        "y": 460,
        "wires": []
    },
    {
        "id": "1690067ec240d668",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "Summed",
        "group": "3f443d245e239542",
        "order": 1,
        "width": 10,
        "height": 5,
        "gtype": "gage",
        "title": "{{msg.topic}}",
        "label": "{{msg.label}}",
        "format": "{{value}}",
        "min": 0,
        "max": "10000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1940,
        "y": 480,
        "wires": []
    },
    {
        "id": "cf22e7d3e006b5c1",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Summed",
        "func": "if(global.get(\"isThreePhase\"))\n{\n    msg.topic = \"Totaal\";\n    if(global.get(\"showPower\"))\n    {\n        msg.payload = Math.round(msg.payload[3]); \n    }\n    else\n    {\n        msg.payload = Math.round(msg.payload[3] / 3); \n    }\n}\nelse\n{\n    msg.topic = \"L1\";\n    msg.payload = msg.payload[0];\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 460,
        "wires": [
            [
                "1690067ec240d668",
                "ca6d01d9cf51bcae"
            ]
        ]
    },
    {
        "id": "d476a65b9e2a797d",
        "type": "ui_table",
        "z": "e7a7e61768dadc02",
        "group": "3dfa3ccc55128d14",
        "name": "",
        "order": 1,
        "width": "0",
        "height": "0",
        "columns": [
            {
                "field": "Groep",
                "title": "Groep",
                "width": "",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Current",
                "title": "Stroom (mA)",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Power",
                "title": "Power (W)",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Cost",
                "title": "kWh / Day",
                "width": "15%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            },
            {
                "field": "Avg",
                "title": "(EUR) / Day",
                "width": "18%",
                "align": "left",
                "formatter": "plaintext",
                "formatterParams": {
                    "target": "_blank"
                }
            }
        ],
        "outputs": 1,
        "cts": true,
        "x": 1930,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "fcb0e7f6a608d77f",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Fill table",
        "func": "var file = global.get(\"latestJSON\").data;\nlist = [];\ndataInput = msg.payload;\nhistorySave = global.get(\"historySave\") || {};\nmsg.payload = \n[{\n    \"Groep\": \"gr\"\n}]\nfor(i = 0; i < file.length; i++)\n{\n    if(file[i].KastNaam == global.get(\"Kastnaam\"))\n    {\n        if(file[i].isThreePhase)\n        {\n            current = Math.round((dataInput[file[i].Adr] + dataInput[file[i].Adr + 1] + dataInput[file[i].Adr + 2]) * 10 / 3);\n            power = Math.round(current * 230);\n        }\n        else\n        {\n            current = dataInput[file[i].Adr] * 10;\n            power = Math.round(current * 230);\n        }\n        list.push\n        ( \n            {\n            id: i,\n            Groep: file[i].Naam,\n            Current: current + \" mA\",\n            Power: power + \" W\",\n            Cost : (historySave[file[i].Naam] * (1 / global.get(\"counter\")) * 360 * 24).toFixed(2) + \" kWh\",\n            Avg : \"€ \" + (historySave[file[i].Naam] * (1 / global.get(\"counter\")) * 360 * 24 * 0.5).toFixed(2)\n            }\n        )\n    }\n}\nmsg.payload = \n{\n    \"command\":\"updateOrAddData\",\n    \"arguments\":\n    [list]\n}\nreturn msg;  \n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 620,
        "wires": [
            [
                "d476a65b9e2a797d"
            ]
        ]
    },
    {
        "id": "46d4f8fb5bbdac05",
        "type": "link out",
        "z": "e7a7e61768dadc02",
        "name": "link out 2",
        "mode": "link",
        "links": [
            "a312a65eca41bf8d"
        ],
        "x": 565,
        "y": 460,
        "wires": []
    },
    {
        "id": "a312a65eca41bf8d",
        "type": "link in",
        "z": "e7a7e61768dadc02",
        "name": "link in 2",
        "links": [
            "46d4f8fb5bbdac05"
        ],
        "x": 1615,
        "y": 600,
        "wires": [
            [
                "fcb0e7f6a608d77f"
            ]
        ]
    },
    {
        "id": "c536d0eefcfa4c24",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Record history data",
        "func": "const d = new Date();\nyear = d.getFullYear().toString();\nmonth = (d.getMonth() + 1).toString().padStart(2, '0');\nday = d.getDate().toString().padStart(2, '0');\nhour = d.getHours();\nminute = d.getMinutes();\nsecond = d.getSeconds();\n\nvar file = global.get(\"latestJSON\").data;\nvar dataInput = msg.payload;\nvar historySave = global.get(\"historySave\") || {};\n\nif(hour != global.get(\"lastHour\"))\n{\n    hourlyData = global.get(\"hourlyData\") || [];\n    hourlyData[hour] = (global.get(\"totalEnergy\")||0) - (global.get(\"lastEnergy\")||0);\n    historySave[\"hourlyData\"] = hourlyData;  //deze\n    global.set(\"lastEnergy\", global.get(\"totalEnergy\"));\n    global.set(\"lastHour\", hour);\n    global.set(\"hourlyData\", hourlyData);\n    console.log(\"Hourly datapoint created\");\n}\n\nif(typeof(historySave) == \"undefined\")\n{\n    historySave = {};\n}\n\nfor(i = 0; i < file.length; i++)\n{\n    if(file[i].KastNaam == msg.topic)\n    {\n        if(historySave[file[i].Naam] == \"undefined\")\n        {\n            historySave.push({Naam : file[i].Naam});\n        }\n        if(file[i].isThreePhase)\n        {\n            historySave[file[i].Naam] = (historySave[file[i].Naam] + (dataInput[file[i].Adr + 0] * 10 * (global.get(\"L1_voltage\") / 1000) * (1/6) * (1/60) / 1000)|| 0);\n            historySave[file[i].Naam] = (historySave[file[i].Naam] + (dataInput[file[i].Adr + 1] * 10 * (global.get(\"L2_voltage\") / 1000) * (1/6) * (1/60) / 1000)|| 0);\n            historySave[file[i].Naam] = (historySave[file[i].Naam] + (dataInput[file[i].Adr + 2] * 10 * (global.get(\"L3_voltage\") / 1000) * (1/6) * (1/60) / 1000)|| 0);\n        }\n        else\n        {\n            historySave[file[i].Naam] = (historySave[file[i].Naam] + (dataInput[file[i].Adr] * 10 * (global.get(\"L1_voltage\") / 1000) * (1/6) * (1/60) / 1000)|| 0);\n        }\n    }\n}\nhistorySave.total = global.get(\"totalEnergy\");\nhistorySave.counter = global.get(\"counter\");\nglobal.set(\"historySave\", historySave);\nmsg.payload = historySave;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 680,
        "wires": [
            [
                "62492ffd0fb4af3e"
            ]
        ]
    },
    {
        "id": "eba9c014417df7ae",
        "type": "delay",
        "z": "e7a7e61768dadc02",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 660,
        "wires": [
            [
                "c536d0eefcfa4c24",
                "e59687cba4ed1feb"
            ]
        ]
    },
    {
        "id": "473c6d0d5c3e59f7",
        "type": "delay",
        "z": "e7a7e61768dadc02",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 900,
        "y": 700,
        "wires": [
            [
                "c536d0eefcfa4c24"
            ]
        ]
    },
    {
        "id": "e59687cba4ed1feb",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Counter",
        "func": "counter = global.get(\"counter\") || 0;\ncounter++;\nglobal.set(\"counter\", counter);\nmsg.payload = counter;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "e5ed7c8c732a8841",
        "type": "switch",
        "z": "e7a7e61768dadc02",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Kastnaam",
                "vt": "global"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1530,
        "y": 620,
        "wires": [
            [
                "fcb0e7f6a608d77f"
            ]
        ]
    },
    {
        "id": "62492ffd0fb4af3e",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Save history data",
        "func": "const d = new Date();\nyear = d.getFullYear().toString();\nmonth = (d.getMonth() + 1).toString().padStart(2, '0');\nday = d.getDate().toString().padStart(2, '0');\nhour = d.getHours();\nminute = d.getMinutes();\nsecond = d.getSeconds();\nmsg.topic = global.get(\"defaultFolder\") + \"/energylogs/\" + (day + \"-\" + month + \"-\" + year) + \".log\";\n\nif(hour == 0 && minute == 0 && second < 60)\n{\n    global.set(\"historySave\", {});\n    global.set(\"counter\", 0);\n    global.set(\"totalEnergy\", 0);\n}\n\nloadedData = global.get(\"loadedData\");\nif(typeof(loadedData) == \"undefined\")\n{\n    loadedData = [];\n}\nfor(i = 0; i < loadedData.length; i++)\n{\n    if(loadedData[i].filePath == msg.topic)\n    {\n        loadedData.splice(i, 1);\n    }\n}\nloadedData.push({filePath : msg.topic, data : msg.payload})\nglobal.set(\"loadedData\", loadedData);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 680,
        "wires": [
            [
                "39dd516c6fe36768",
                "e280fd691f74114c",
                "a06a651fd0fe4c51"
            ]
        ]
    },
    {
        "id": "39dd516c6fe36768",
        "type": "file",
        "z": "e7a7e61768dadc02",
        "name": "",
        "filename": "topic",
        "filenameType": "msg",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1620,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "7259a4ae6abf95c7",
        "type": "ui_dropdown",
        "z": "e7a7e61768dadc02",
        "name": "",
        "label": "",
        "tooltip": "",
        "place": "Select option",
        "group": "3dfa3ccc55128d14",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Regelkast_RK1",
                "value": "Regelkast_RK1",
                "type": "str"
            },
            {
                "label": "Meterkast_KK_LK",
                "value": "Meterkast_KK_LK",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "dropdown",
        "topicType": "str",
        "className": "",
        "x": 300,
        "y": 480,
        "wires": [
            [
                "dea28c34456c5f77",
                "7ed2518c22b14299"
            ]
        ]
    },
    {
        "id": "fc58843c2c26b054",
        "type": "link out",
        "z": "e7a7e61768dadc02",
        "name": "link out 3",
        "mode": "link",
        "links": [
            "0a801f30203f6a49"
        ],
        "x": 565,
        "y": 500,
        "wires": []
    },
    {
        "id": "0a801f30203f6a49",
        "type": "link in",
        "z": "e7a7e61768dadc02",
        "name": "link in 3",
        "links": [
            "fc58843c2c26b054"
        ],
        "x": 1785,
        "y": 660,
        "wires": [
            [
                "d476a65b9e2a797d"
            ]
        ]
    },
    {
        "id": "7ed2518c22b14299",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Clear table",
        "func": "msg.payload = \n{\n    \"command\":\"setData\",\n    \"arguments\":\n    []\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 480,
        "wires": [
            [
                "fc58843c2c26b054"
            ]
        ]
    },
    {
        "id": "bdc1773f43add641",
        "type": "ui_chart",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "3dfa3ccc55128d14",
        "order": 3,
        "width": 0,
        "height": 0,
        "label": "kWh per groep per dag",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1980,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "e280fd691f74114c",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Fill chart",
        "func": "var file = global.get(\"latestJSON\").data;\nloadedData = global.get(\"loadedData\");\ndataArray = [[], []];\nlabels = [];\nseries = [];\nfor(i = 0; i < loadedData.length; i++)\n{\n    path = loadedData[i].filePath;\n    series.push(path.substring(path.lastIndexOf('/') + 1, path.lastIndexOf('-')));\n    for(var property in loadedData[i].data)\n    {\n        for(a = 0; a < file.length; a++)\n        {\n            if(file[a].KastNaam == global.get(\"Kastnaam\") && file[a].Naam == property)\n            {\n                if(i == 0)\n                {\n                    labels.push(property);\n                }\n                dataArray[i].push((Math.round(loadedData[i].data[property] * (1 / loadedData[i].data.counter) * 360 * 24 * 10) / 10 ));  \n            }\n        }\n    }\n}\nmsg.payload=[{\n    \"series\": series,\n    \"data\": dataArray,\n    \"labels\": labels\n}];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 740,
        "wires": [
            [
                "bdc1773f43add641"
            ]
        ]
    },
    {
        "id": "a7f5b29fdeb2af7b",
        "type": "file in",
        "z": "e7a7e61768dadc02",
        "name": "",
        "filename": "topic",
        "filenameType": "msg",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 1300,
        "y": 740,
        "wires": [
            [
                "12b4443032845aef"
            ]
        ]
    },
    {
        "id": "af3ccc0c470593b0",
        "type": "ui_date_picker",
        "z": "e7a7e61768dadc02",
        "name": "",
        "label": "date",
        "group": "3dfa3ccc55128d14",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 930,
        "y": 740,
        "wires": [
            [
                "06eedbe72f5f4ecf"
            ]
        ]
    },
    {
        "id": "06eedbe72f5f4ecf",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "date to file",
        "func": "var d = new Date(msg.payload);\nyear = d.getFullYear().toString();\nmonth = (d.getMonth() + 1).toString().padStart(2, '0');\nday = d.getDate().toString().padStart(2, '0');\nhour = d.getHours();\nminute = d.getMinutes();\nsecond = d.getSeconds();\nglobal.set(\"loadedData\", []);\n\nmsg.topic = global.get(\"defaultFolder\") + \"/energylogs/\" + (day + \"-\" + month + \"-\" + year) + \".log\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 740,
        "wires": [
            [
                "a7f5b29fdeb2af7b"
            ]
        ]
    },
    {
        "id": "12b4443032845aef",
        "type": "json",
        "z": "e7a7e61768dadc02",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 1430,
        "y": 740,
        "wires": [
            [
                "cb37db0a8aecfa30"
            ]
        ]
    },
    {
        "id": "cb37db0a8aecfa30",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "loadData",
        "func": "loadedData = global.get(\"loadedData\");\nfor(i = 0; i < loadedData.length; i++)\n{\n    if(loadedData[i].filePath == msg.topic)\n    {\n        loadedData.splice(i, 1);\n    }\n}\nloadedData.push({\"filePath\" : msg.topic, \"data\" : msg.payload});\nglobal.set(\"loadedData\", loadedData);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 740,
        "wires": [
            [
                "e280fd691f74114c"
            ]
        ]
    },
    {
        "id": "bfdc7805aa8b1ad3",
        "type": "debug",
        "z": "e7a7e61768dadc02",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1640,
        "y": 1000,
        "wires": []
    },
    {
        "id": "ca84ce2ae8a28247",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "function 2",
        "func": "//msg.payload = (global.get(\"hourlyData\"));\n//msg.payload = (global.get(\"HistorySave\"));\n//msg.payload = global.get(\"Kastnaam\");\n//msg.payload = (global.get(\"lastHour\"));\n//msg.payload = global.get(\"totalEnergy\");\n//msg.payload = global.set(\"loadedData\", []);\n//msg.payload = global.get(\"koffieCounter\");\n//msg.payload = global.get(\"KastNaam\");\nmsg.payload = global.get(\"latestJSON\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 1000,
        "wires": [
            [
                "bfdc7805aa8b1ad3"
            ]
        ]
    },
    {
        "id": "f695fdff06b483f9",
        "type": "inject",
        "z": "e7a7e61768dadc02",
        "name": "Initialise history",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 1340,
        "y": 1000,
        "wires": [
            [
                "ca84ce2ae8a28247"
            ]
        ]
    },
    {
        "id": "bf45c2b5e36d54f6",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Meterkast_KK_LK",
        "func": "msg.payload = \n{\n   'address' : '0', \n   'quantity': '42'\n}\nmsg.topic = \"Meterkast_KK_LK\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 660,
        "wires": [
            [
                "0fc427c64be15578"
            ]
        ]
    },
    {
        "id": "bc9659561bec9aef",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Regelkast_RK1",
        "func": "msg.payload = \n{\n   'address' : '0', \n   'quantity': '37'\n}\nmsg.topic = \"Regelkast_RK1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 700,
        "wires": [
            [
                "f3e8bee8253e84fe"
            ]
        ]
    },
    {
        "id": "cfab506f4af2f7ba",
        "type": "subflow:402ec0456b47332d",
        "z": "e7a7e61768dadc02",
        "name": "",
        "x": 100,
        "y": 440,
        "wires": [
            [
                "8d15bad4c169da1c"
            ]
        ]
    },
    {
        "id": "298f87daaee29f4f",
        "type": "subflow:ab81a7027a50d0cf",
        "z": "e7a7e61768dadc02",
        "name": "",
        "x": 90,
        "y": 400,
        "wires": [
            [
                "8d15bad4c169da1c"
            ]
        ]
    },
    {
        "id": "21504c1a9dc5e115",
        "type": "subflow:c86e277274d8a2dc",
        "z": "e7a7e61768dadc02",
        "name": "",
        "x": 130,
        "y": 320,
        "wires": [
            [
                "8d15bad4c169da1c"
            ]
        ]
    },
    {
        "id": "abefb9cc642f2cb4",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Paneel RK1",
        "func": "total = (msg.payload[14] + msg.payload[16] + msg.payload[18]) / 100;\nif(global.get(\"showPower\"))\n{\n    msg.L1v = Math.round(msg.payload[46] / 100) / 10;\n    msg.L2v = Math.round(msg.payload[48] / 100) / 10;\n    msg.L3v = Math.round(msg.payload[50] / 100) / 10;\n    msg.max = 8; \n    msg.unit = \"kW\";\n    msg.payload = Math.round((msg.payload[46] + msg.payload[48] + msg.payload[50]) / 100) / 10;\n}\nelse\n{\n    msg.L1v = Math.round(msg.payload[14] / 10) / 10;\n    msg.L2v = Math.round(msg.payload[16] / 10) / 10;\n    msg.L3v = Math.round(msg.payload[18] / 10) / 10;\n    msg.max = 40; \n    msg.unit = \"A\";\n}\nglobal.set(\"Regelkast_RK1\", total);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1180,
        "wires": [
            [
                "a7b3b1856b93635d",
                "0375a5ef50ce8fa8"
            ]
        ]
    },
    {
        "id": "6d2ac88a7d32c65d",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "TotalPower",
        "func": "i1 = msg.payload[0];\ni2 = msg.payload[1];\ni3 = msg.payload[2];\np1 = msg.payload[16];\np2 = msg.payload[17];\np3 = msg.payload[18];\n\nenergy = msg.payload[36];\nenergy_dx = energy - (global.get(\"oldEnergy\") || 0);\nglobal.set(\"oldEnergy\", energy);\nglobal.set(\"totalEnergy\", (global.get(\"totalEnergy\")||0) + energy_dx);\n\n\n\nPower = msg.payload[15] / 100;\nif(global.get(\"showPower\"))\n{\n    msg.unit = \"kW\";\n    msg.max = 80;\n    msg.L1v = Math.round(p1 / 10) / 10;\n    msg.L2v = Math.round(p2 / 10) / 10;\n    msg.L3v = Math.round(p3 / 10) / 10;\n}\nelse\n{\n    msg.unit = \"A\";\n    msg.max = 400;\n    msg.L1v = Math.round(i1 / 10) / 10;\n    msg.L2v = Math.round(i2 / 10) / 10;\n    msg.L3v = Math.round(i3 / 10) / 10;\n}\nmsg.payload = Math.round(Power * 10) / 10;\nmsg.debug = energy;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1340,
        "wires": [
            [
                "6a9234a1e9870a90",
                "3532401f2d38e9ec"
            ]
        ]
    },
    {
        "id": "6a9234a1e9870a90",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "4c7a2afe4e5b67d1",
        "order": 1,
        "width": 8,
        "height": 5,
        "gtype": "gage",
        "title": "Totaal Verbruik",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "240",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 640,
        "y": 1340,
        "wires": []
    },
    {
        "id": "0fc427c64be15578",
        "type": "modbus-flex-getter",
        "z": "e7a7e61768dadc02",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "e64cb74f6622eebb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 550,
        "y": 660,
        "wires": [
            [
                "e5ed7c8c732a8841",
                "390436a40819281a",
                "ef92574876b8f1a5",
                "eba9c014417df7ae"
            ],
            []
        ]
    },
    {
        "id": "f3e8bee8253e84fe",
        "type": "modbus-flex-getter",
        "z": "e7a7e61768dadc02",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "e109d36b633b2a51",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 550,
        "y": 700,
        "wires": [
            [
                "e5ed7c8c732a8841",
                "473c6d0d5c3e59f7",
                "ce3bf0ecfbec6ffd",
                "390436a40819281a"
            ],
            []
        ]
    },
    {
        "id": "f21414123e14150c",
        "type": "modbus-flex-getter",
        "z": "e7a7e61768dadc02",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "e64cb74f6622eebb",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 550,
        "y": 740,
        "wires": [
            [
                "820f6c420405fc51"
            ],
            []
        ]
    },
    {
        "id": "48c710db6601624c",
        "type": "modbus-flex-getter",
        "z": "e7a7e61768dadc02",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "e109d36b633b2a51",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 550,
        "y": 780,
        "wires": [
            [
                "abefb9cc642f2cb4"
            ],
            []
        ]
    },
    {
        "id": "4f4d728da90688b3",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Meterkast_KK_LK_Totaal",
        "func": "msg.payload = \n{\n   'address' : '36866', \n   'quantity': '120'\n}\nmsg.topic = \"Meterkast_KK_LK\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 740,
        "wires": [
            [
                "f21414123e14150c"
            ]
        ]
    },
    {
        "id": "6ad8675063f8467f",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Regelkast_RK1_Totaal",
        "func": "msg.payload = \n{\n   'address' : '36866', \n   'quantity': '120',\n}\nmsg.topic = \"Regelkast_RK1\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 780,
        "wires": [
            [
                "48c710db6601624c"
            ]
        ]
    },
    {
        "id": "f0b6de1a9cac2fda",
        "type": "inject",
        "z": "e7a7e61768dadc02",
        "name": "",
        "props": [],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 760,
        "wires": [
            [
                "bf45c2b5e36d54f6",
                "bc9659561bec9aef",
                "4f4d728da90688b3",
                "6ad8675063f8467f",
                "a3b3ecf58da0c660",
                "646b3012069be12b"
            ]
        ]
    },
    {
        "id": "a7b3b1856b93635d",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "24f987a86860e208",
        "order": 1,
        "width": 8,
        "height": 5,
        "gtype": "gage",
        "title": "Totaal",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "24",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 770,
        "y": 1180,
        "wires": []
    },
    {
        "id": "cc380b4471ae4b88",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Paneel KK LK",
        "func": "total = (msg.payload[14] + msg.payload[16] + msg.payload[18]) / 100;\nif(global.get(\"showPower\"))\n{\n    msg.L1v = Math.round(msg.payload[46] / 100) / 10;\n    msg.L2v = Math.round(msg.payload[48] / 100) / 10;\n    msg.L3v = Math.round(msg.payload[50] / 100) / 10;\n    msg.max = 13; \n    msg.unit = \"kW\";\n    msg.payload = Math.round((msg.payload[46] + msg.payload[48] + msg.payload[50]) / 100) / 10;\n}\nelse\n{\n    msg.L1v = Math.round(msg.payload[14] / 10) / 10;\n    msg.L2v = Math.round(msg.payload[16] / 10) / 10;\n    msg.L3v = Math.round(msg.payload[18] / 10) / 10;\n    msg.max = 63; \n    msg.unit = \"A\";\n}\nglobal.set(\"Meterkast_KK_LK\", total);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1220,
        "wires": [
            [
                "d43deaf5b47aae66",
                "5acfbf04133f705a"
            ]
        ]
    },
    {
        "id": "d43deaf5b47aae66",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "93b9fb66d51f7df0",
        "order": 1,
        "width": 8,
        "height": 5,
        "gtype": "gage",
        "title": "Totaal",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "39",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 770,
        "y": 1220,
        "wires": []
    },
    {
        "id": "97f3e9161d132e9e",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "SumPhases",
        "func": "if(msg.payload == true)\n{\n    global.set(\"sumPhases\", true);\n}\nelse\n{\n    global.set(\"sumPhases\", false);\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "57f8eacdeee7cfd2",
        "type": "ui_switch",
        "z": "e7a7e61768dadc02",
        "name": "",
        "label": "Laat vermogen zien",
        "tooltip": "",
        "group": "cff9e3590a3f1841",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "topic",
        "topicType": "msg",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 790,
        "y": 520,
        "wires": [
            [
                "7b9e512bfa69fb64",
                "1a061ccb8bf8560c"
            ]
        ]
    },
    {
        "id": "92000d3ba4f18216",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Select gauges",
        "func": "if(global.get(\"sumPhases\") && global.get(\"showPower\"))\n{\n    msg.payload = {\"group\":{\"hide\":[\"Totaal_Regelkast_RK1\", \"Totaal_Meterkast_KK_LK\", \"Totaal_Totaal_L123\"], \"show\" : [\"Totaal_Regelkast_RK1_Totaal\", \"Totaal_Meterkast_KK_LK_Totaal\", \"Totaal_Totaal\"]}};       \n}\nelse\n{\n    msg.payload = {\"group\":{\"show\":[\"Totaal_Regelkast_RK1\", \"Totaal_Meterkast_KK_LK\", \"Totaal_Totaal_L123\"], \"hide\" :[\"Totaal_Regelkast_RK1_Totaal\", \"Totaal_Meterkast_KK_LK_Totaal\", \"Totaal_Totaal\"]}};\n}\n// if(global.get(\"showPower\"))\n// {\n    \n// }\n// else\n// {\n    \n// }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1420,
        "wires": [
            [
                "6a766ad884ad0697"
            ]
        ]
    },
    {
        "id": "6a766ad884ad0697",
        "type": "ui_ui_control",
        "z": "e7a7e61768dadc02",
        "name": "",
        "events": "all",
        "x": 620,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "288e64ad18050be2",
        "type": "switch",
        "z": "e7a7e61768dadc02",
        "name": "",
        "property": "isThreePhase",
        "propertyType": "global",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1930,
        "y": 260,
        "wires": [
            [
                "5fdaf9dbe755ec1d"
            ]
        ]
    },
    {
        "id": "ca6d01d9cf51bcae",
        "type": "switch",
        "z": "e7a7e61768dadc02",
        "name": "",
        "property": "isThreePhase",
        "propertyType": "global",
        "rules": [
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1930,
        "y": 520,
        "wires": [
            [
                "5fdaf9dbe755ec1d"
            ]
        ]
    },
    {
        "id": "c5b07028d4d7f33b",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Set gauge",
        "func": "if(global.get(\"isThreePhase\") && global.get(\"showPower\"))\n{\n    msg = {ui_control:{max:msg.ui_control.max * 3}}; \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1750,
        "y": 500,
        "wires": [
            [
                "1690067ec240d668"
            ]
        ]
    },
    {
        "id": "5fdaf9dbe755ec1d",
        "type": "ui_chart",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "625aeb6ac8e0d899",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 2150,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "0d3fa7022949bec6",
        "type": "ui_button",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "625aeb6ac8e0d899",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 1930,
        "y": 560,
        "wires": [
            [
                "5fdaf9dbe755ec1d"
            ]
        ]
    },
    {
        "id": "556fd0f9433bf61f",
        "type": "openweathermap",
        "z": "e7a7e61768dadc02",
        "name": "",
        "wtype": "current",
        "lon": "4.620921",
        "lat": "51.821909",
        "city": "",
        "country": "",
        "language": "nl",
        "x": 230,
        "y": 1500,
        "wires": [
            [
                "f5bb3213bc0a5622"
            ]
        ]
    },
    {
        "id": "e7f506bc7678d06d",
        "type": "inject",
        "z": "e7a7e61768dadc02",
        "name": "",
        "props": [],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "x": 70,
        "y": 1520,
        "wires": [
            [
                "556fd0f9433bf61f",
                "430e270863fa246e"
            ]
        ]
    },
    {
        "id": "35027787e74007a5",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "229115e6750f477a",
        "name": "Weather Display",
        "order": 1,
        "width": 8,
        "height": 8,
        "format": "<style>\ntable, th, td {\n  border: 0px solid black;\n  text-align: center;\n  table-layout: fixed;\n}\nth, td {\n  padding: 0px;\n}\n</style>\n<link rel=\"stylesheet\" href=\"/weather-icons/mycss/weather-icons.min.css\">\n\n<table style=\"display: flex;height: 100%;justify-content: center;align-items: top; line-height: 200%;\">\n    \n<tr>\n    <th colspan=\"3\">\n        <b style=\"color: White; font-size:40px\">Verkerk Zwijndrecht</b>\n    </th>\n</tr>\n\n<tr>\n    <td style=\"padding: 0px\" colspan=\"3\">\n        <b style=\"color: white; font-size:15px\">Molenvliet 1</b>\n    </td>\n</tr>\n\n<tr>\n    <td colspan=\"3\" style=\"padding: 13px; color: {{msg.color}}\">\n        <i class=\"fa-5x wi wi-wu- {{msg.icon}}\"></i>\n    </td>\n</tr>\n\n<tr>\n    <td colspan=\"3\">\n        <b style=\"color: white; font-size:25px\">{{msg.detail}}</b>\n    </td>\n</tr>\n\n<tr>\n    <td width=\"33%\">\n        <b style=\"color: LightCyan; font-size:20px;\">Laag</b>\n    </td>\n    <td width=\"34%\">\n        <b style=\"color: White; font-size:40px;\">Nu</b>\n    </td>\n    <td width=\"33%\">\n        <b style=\"color: #ffdb99; font-size:20px;\">Hoog</b>\n    </td>\n</tr>\n\n<tr>\n    <td>\n        <b style=\"color: LightCyan; font-size:20px;\">{{msg.temperature_low}}°C</b>\n    </td>\n    <td>\n        <b style=\"color: white; font-size:40px;\">{{msg.temperature}}°C</b>\n    </td>\n    <td>\n        <b style=\"color: #ffdb99; font-size:20px;\">{{msg.temperature_high}}°C</b>\n    </td>\n</tr>\n\n<tr style=\"color: White\">\n    <td>\n        <i class=\"fa-3x wi wi-wu- {{msg.windIcon}}\"></i>\n    </td>\n    <td>\n        <i class=\"fa-4x wi wi-wu- wi-raindrops\"></i>\n    </td>\n    <td>\n        <i class=\"fa-2x wi wi-wu- wi-humidity\"></i>  \n    </td>\n</tr>\n<tr>\n    <td>\n        <b style=\"color: White; font-size:20px;\">{{msg.windspeed}} km/u</b>\n    </td>\n    <td>\n        <b style=\"color: White; font-size:20px;\">{{msg.precipitation}} mm</b>\n    </td>\n    <td>\n        <b style=\"color: White; font-size:20px;\">{{msg.humidity}}%</b>\n    </td>\n</tr>\n\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "f5bb3213bc0a5622",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Display weather",
        "func": "const owIconMap = new Map();\nowIconMap.set('01d', 'wi-day-sunny'); // clear sky\nowIconMap.set('02d', 'wi-day-cloudy'); // few clouds\nowIconMap.set('03d', 'wi-cloud'); // scattered clouds\nowIconMap.set('04d', 'wi-cloudy'); // broken clouds\nowIconMap.set('09d', 'wi-day-showers'); // shower rain\nowIconMap.set('10d', 'wi-day-rain'); // rain\nowIconMap.set('11d', 'wi-thunderstorm'); // thunderstorm\nowIconMap.set('13d', 'wi-snow'); // snow\nowIconMap.set('50d', 'wi-fog'); // mist\nowIconMap.set('01n', 'wi-night-clear'); // clear sky\nowIconMap.set('02n', 'wi-night-alt-cloudy'); // few clouds\nowIconMap.set('03n', 'wi-cloud'); // scattered clouds\nowIconMap.set('04n', 'wi-cloudy'); // broken clouds\nowIconMap.set('09n', 'wi-night-alt-showers'); // shower rain\nowIconMap.set('10n', 'wi-night-alt-rain'); // rain\nowIconMap.set('11n', 'wi-thunderstorm'); // thunderstorm\nowIconMap.set('13n', 'wi-snow'); // snow\nowIconMap.set('50n', 'wi-fog'); // mist\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction getBeaufort(metricSpeed)\n{\n    if(metricSpeed >= 0 && metricSpeed <= 0.2)\n    {\n        return \"wi-wind-beaufort-0\";\n    }\n    else if(metricSpeed >= 0.3 && metricSpeed <= 1.5)\n    {\n        return \"wi-wind-beaufort-1\";\n    }\n    else if(metricSpeed >= 1.6 && metricSpeed <= 3.3)\n    {\n        return \"wi-wind-beaufort-2\";\n    }\n    else if(metricSpeed >= 3.4 && metricSpeed <= 5.4)\n    {\n        return \"wi-wind-beaufort-3\";\n    }\n    else if(metricSpeed >= 5.5 && metricSpeed <= 7.9)\n    {\n        return \"wi-wind-beaufort-4\";\n    }\n    else if(metricSpeed >= 8.0 && metricSpeed <= 10.7)\n    {\n        return \"wi-wind-beaufort-5\";\n    }\n    else if(metricSpeed >= 10.8 && metricSpeed <= 13.8)\n    {\n        return \"wi-wind-beaufort-6\";\n    }\n    else if(metricSpeed >= 13.9 && metricSpeed <= 17.1)\n    {\n        return \"wi-wind-beaufort-7\";\n    }\n    else if(metricSpeed >= 17.2 && metricSpeed <= 20.7)\n    {\n        return \"wi-wind-beaufort-8\";\n    }\n    else if(metricSpeed >= 20.8 && metricSpeed <= 24.4)\n    {\n        return \"wi-wind-beaufort-9\";\n    }\n    else if(metricSpeed >= 24.5 && metricSpeed <= 28.4)\n    {\n        return \"wi-wind-beaufort-10\";\n    }\n    else if(metricSpeed >= 28.5 && metricSpeed <= 32.6)\n    {\n        return \"wi-wind-beaufort-11\";\n    }\n    else if(metricSpeed >= 32.7)\n    {\n        return \"wi-wind-beaufort-12\";\n    }\n    \n}\nmsg.temperature_low = msg.payload.temp_minc;\nmsg.temperature = msg.payload.tempc;\nmsg.temperature_high = msg.payload.temp_maxc;\nmsg.windspeed = Math.round(msg.payload.windspeed * 3.6);\nmsg.detail = capitalizeFirstLetter(msg.payload.detail);\nmsg.humidity = msg.payload.humidity;\nmsg.windIcon = getBeaufort(msg.payload.windspeed);\nmsg.precipitation = msg.payload.rain || 0.0;\n\n\nmsg.icon = owIconMap.get(msg.payload.icon);\nif(msg.payload.icon == \"01d\")\n{\n    msg.color = \"yellow\";\n}\nelse if(msg.payload.icon == \"02d\" || msg.payload.icon == \"10d\" || msg.payload.icon == \"09d\")\n{\n    msg.color = \"White\";\n}\nelse\n{\n    msg.color = \"LightGray\";\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1500,
        "wires": [
            [
                "35027787e74007a5"
            ]
        ]
    },
    {
        "id": "17aad4b0017d7b94",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "531968520caaaced",
        "name": "Energy Display",
        "order": 1,
        "width": 8,
        "height": 2,
        "format": "<script src=\"https://kit.fontawesome.com/1d88fd5114.js\" crossorigin=\"anonymous\"></script>\n\n<table>\n<tr>\n    <th>\n        <i class=\"fa-solid fa-sun fa-beat-fade\"></i>\n    </th>\n    <th>\n        <b>Energie opgewekt vandaag:</b>\n    </th>\n    <th>\n        <b>0.00 kWh</b>\n    </th>\n</tr>\n<tr>\n    <td>\n        <i class=\"fa-solid fa-bolt fa-beat-fade\"></i>\n    </td>\n    <td>\n        <b>Energie verbruikt vandaag:</b>\n    </td>\n    <td>\n        <b>{{msg.totalEnergy}} kWh</b>\n    </td>\n</tr>\n<tr>\n    <td>\n        <i class=\"fa-solid fa-coins\"></i>\n    </td>\n    <td>\n        <b>Energiekosten vandaag:</b>\n    </td>\n    <td>\n        <b>€ {{msg.totalCost}}</b>\n    </td>\n</tr>\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "b113e65eda726113",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Energy",
        "func": "msg.totalEnergy = (Math.round(global.get(\"totalEnergy\") * 10) / 10000).toFixed(2);\nmsg.totalCost = (msg.totalEnergy * 0.5).toFixed(2);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1460,
        "wires": [
            [
                "17aad4b0017d7b94"
            ]
        ]
    },
    {
        "id": "56302be4396da9df",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "229115e6750f477a",
        "name": "Weather Display Forecast",
        "order": 2,
        "width": 8,
        "height": 4,
        "format": "<link rel=\"stylesheet\" href=\"/weather-icons/mycss/weather-icons.min.css\">\n\n<table style=\"display: flex;height: 100%;justify-content: center;align-items: top; line-height: 200%;\">\n    <tr>\n        <th>\n            <b style=\"color: white; font-size:20px;\">{{msg.time[0]}}</b>\n        </th>\n        <th>\n            <b style=\"color: white; font-size:20px;\">{{msg.time[1]}}</b>\n        </th>\n        <th>\n            <b style=\"color: white; font-size:20px;\">{{msg.time[2]}}</b>\n        </th>\n    </tr>\n    <tr><td style=\"padding-bottom: 10px\" colspan=\"3\"></td></tr>\n    <tr>\n        <td style=\"color:{{msg.color[0]}};\">\n            <i class=\"fa-4x wi wi-wu- {{msg.icon[0]}}\"></i>   \n        </td>\n        <td style=\"color:{{msg.color[1]}}; padding-left: 30px; padding-right: 30px;\">\n            <i class=\"fa-4x wi wi-wu- {{msg.icon[1]}}\"></i>    \n        </td>\n        <td style=\"color:{{msg.color[2]}};\">\n            <i class=\"fa-4x wi wi-wu- {{msg.icon[2]}}\"></i>    \n        </td>\n    </tr>\n    \n    <tr>\n        <td>\n            <b style=\"color: white; font-size:20px;\">{{msg.temperature[0]}}°C</b>\n        </td>\n        <td>\n            <b style=\"color: white; font-size:20px;\">{{msg.temperature[1]}}°C</b>\n        </td>\n        <td>\n            <b style=\"color: white; font-size:20px;\">{{msg.temperature[2]}}°C</b>\n        </td>\n    </tr>\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 1540,
        "wires": [
            []
        ]
    },
    {
        "id": "5f3479e72c7e3273",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Display weather",
        "func": "function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nconst owIconMap = new Map();\n\nowIconMap.set('01d', 'wi-day-sunny'); // clear sky\nowIconMap.set('02d', 'wi-day-cloudy'); // few clouds\nowIconMap.set('03d', 'wi-cloud'); // scattered clouds\nowIconMap.set('04d', 'wi-cloudy'); // broken clouds\nowIconMap.set('09d', 'wi-day-showers'); // shower rain\nowIconMap.set('10d', 'wi-day-rain'); // rain\nowIconMap.set('11d', 'wi-thunderstorm'); // thunderstorm\nowIconMap.set('13d', 'wi-snow'); // snow\nowIconMap.set('50d', 'wi-fog'); // mist\nowIconMap.set('01n', 'wi-night-clear'); // clear sky\nowIconMap.set('02n', 'wi-night-alt-cloudy'); // few clouds\nowIconMap.set('03n', 'wi-cloud'); // scattered clouds\nowIconMap.set('04n', 'wi-cloudy'); // broken clouds\nowIconMap.set('09n', 'wi-night-alt-showers'); // shower rain\nowIconMap.set('10n', 'wi-night-alt-rain'); // rain\nowIconMap.set('11n', 'wi-thunderstorm'); // thunderstorm\nowIconMap.set('13n', 'wi-snow'); // snow\nowIconMap.set('50n', 'wi-fog'); // mist\n\nvar temperature = [];\nvar icon = [];\nvar color = [];\nvar time = [];\nfor(i = 0; i < 3; i++)\n{\n    temperature[i] = Math.round(msg.payload[i].main.temp);\n    icon[i] = owIconMap.get(msg.payload[i].weather[0].icon);\n    time[i] = msg.payload[i].dt_txt.substring(11, 16);\n    if(msg.payload[i].weather[0].icon == \"01d\")\n    {\n        color[i] = \"yellow\";\n    }\n    else if(msg.payload[i].weather[0].icon == \"02d\" || msg.payload[i].weather[0].icon == \"10d\" || msg.payload[i].weather[0].icon == \"09d\")\n    {\n        color[i] = \"White\";\n    }\n    else\n    {\n        color[i] = \"LightGray\";\n    }\n}\nmsg.temperature = temperature;\nmsg.icon = icon;\nmsg.color = color;\nmsg.time = time;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 1540,
        "wires": [
            [
                "56302be4396da9df"
            ]
        ]
    },
    {
        "id": "430e270863fa246e",
        "type": "openweathermap",
        "z": "e7a7e61768dadc02",
        "name": "",
        "wtype": "forecast",
        "lon": "4.620921",
        "lat": "51.821909",
        "city": "",
        "country": "",
        "language": "nl",
        "x": 230,
        "y": 1540,
        "wires": [
            [
                "5f3479e72c7e3273"
            ]
        ]
    },
    {
        "id": "c9c6a0806aead721",
        "type": "ui_chart",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "3dfa3ccc55128d14",
        "order": 5,
        "width": 0,
        "height": 0,
        "label": "Totaal kWh per uur",
        "chartType": "bar",
        "legend": "true",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#1f77b4",
            "#1f77b4",
            "#1f77b4",
            "#1f77b4",
            "#1f77b4",
            "#1f77b4",
            "#1f77b4",
            "#1f77b4"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1970,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "a06a651fd0fe4c51",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Fill chart",
        "func": "for(i = 0; i < msg.payload.hourlyData.length; i++)\n{\n    if(msg.payload.hourlyData[i] == undefined)\n    {\n        msg.payload.hourlyData[i] = 0;\n    }\n    else\n    {\n        msg.payload.hourlyData[i] = Math.round(msg.payload.hourlyData[i] * 10) / 10;\n    }\n}\nmsg.payload=[{\n    \"series\": [\"Totaal\"],\n    \"data\": [msg.payload.hourlyData],\n    \"labels\": \n            [ \n            \"00:00\", \n            \"01:00\", \n            \"02:00\", \n            \"03:00\",\n            \"04:00\", \n            \"05:00\", \n            \"06:00\", \n            \"07:00\",\n            \"08:00\", \n            \"09:00\", \n            \"10:00\", \n            \"11:00\",\n            \"12:00\", \n            \"13:00\", \n            \"14:00\", \n            \"15:00\",\n            \"16:00\", \n            \"17:00\", \n            \"18:00\", \n            \"19:00\",\n            \"20:00\", \n            \"21:00\", \n            \"22:00\", \n            \"23:00\"]\n}];\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 780,
        "wires": [
            [
                "c9c6a0806aead721"
            ]
        ]
    },
    {
        "id": "52db64bcec4d8173",
        "type": "knxUltimate",
        "z": "e7a7e61768dadc02",
        "server": "2b01170a9ec02c1c",
        "topic": "",
        "outputtopic": "",
        "dpt": "9.001",
        "initialread": 0,
        "notifyreadrequest": false,
        "notifyresponse": true,
        "notifywrite": true,
        "notifyreadrequestalsorespondtobus": false,
        "notifyreadrequestalsorespondtobusdefaultvalueifnotinitialized": "0",
        "listenallga": true,
        "name": "KNX read request",
        "outputtype": "read",
        "outputRBE": false,
        "inputRBE": false,
        "formatmultiplyvalue": 1,
        "formatnegativevalue": "leave",
        "formatdecimalsvalue": 999,
        "passthrough": "no",
        "x": 670,
        "y": 1780,
        "wires": [
            [
                "e4ad83fc24acd70c",
                "12741a823a247610",
                "c4f4c4e8dab67ee5",
                "53ca89e386486cbd",
                "fb2e6fd72649b670",
                "64ee9f5956a0de0f",
                "ee4d35d201945477",
                "bee0d747ef68bbad"
            ]
        ]
    },
    {
        "id": "6a51e8101d30916d",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "a150eb2db750140b",
        "order": 2,
        "width": 7,
        "height": 5,
        "gtype": "gage",
        "title": "Temperatuur",
        "label": "°C",
        "format": "{{value}}",
        "min": "12",
        "max": "30",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1030,
        "y": 1700,
        "wires": []
    },
    {
        "id": "bee0d747ef68bbad",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Round",
        "func": "if(msg.knx.destination == (global.get(\"selectedRoom\") + \"/1\"))\n{\n    msg.payload = Math.round(msg.payload * 10) / 10;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1700,
        "wires": [
            [
                "6a51e8101d30916d",
                "1d4d7c6d99de9f45"
            ]
        ]
    },
    {
        "id": "ee4d35d201945477",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Round",
        "func": "if(msg.knx.destination == (global.get(\"selectedRoom\") + \"/21\"))\n{\n    msg.payload = Math.round(msg.payload);\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1740,
        "wires": [
            [
                "d8169c0176b2b3ef",
                "1d4d7c6d99de9f45"
            ]
        ]
    },
    {
        "id": "d8169c0176b2b3ef",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "a150eb2db750140b",
        "order": 5,
        "width": 7,
        "height": 5,
        "gtype": "gage",
        "title": "CO2",
        "label": "ppm",
        "format": "{{value}}",
        "min": "200",
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1010,
        "y": 1740,
        "wires": []
    },
    {
        "id": "c4f4c4e8dab67ee5",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Round",
        "func": "if(msg.knx.destination == (global.get(\"selectedRoom\") + \"/41\"))\n{\n    msg.payload = Math.round(msg.payload * 10) / 10;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1780,
        "wires": [
            [
                "fb0af30d50eae52b",
                "1d4d7c6d99de9f45"
            ]
        ]
    },
    {
        "id": "fb0af30d50eae52b",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "a150eb2db750140b",
        "order": 4,
        "width": 7,
        "height": 5,
        "gtype": "gage",
        "title": "Helderheid",
        "label": "lux",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1030,
        "y": 1780,
        "wires": []
    },
    {
        "id": "53ca89e386486cbd",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Round",
        "func": "if(msg.knx.destination == (global.get(\"selectedRoom\") + \"/11\"))\n{\n    msg.payload = Math.round(msg.payload * 10) / 10;\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1820,
        "wires": [
            [
                "ec16bee05cbf1ec2",
                "1d4d7c6d99de9f45"
            ]
        ]
    },
    {
        "id": "ec16bee05cbf1ec2",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "a150eb2db750140b",
        "order": 3,
        "width": 7,
        "height": 5,
        "gtype": "gage",
        "title": "Luchtvochtigheid",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 1050,
        "y": 1820,
        "wires": []
    },
    {
        "id": "64ee9f5956a0de0f",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Set icon",
        "func": "if(msg.topic == \"roomselect\")\n{\n    msg.state = \"Onbekend\";\n    msg.colour = \"color: #808080;\"\n    return msg;\n}\n\nroom = (global.get(\"selectedRoom\")); \nif(room == \"3/4\" || room == \"4/4\" || room == \"5/2\")\n{\n    koeladres = room + \"/7\";\n}\nelse if(room == \"2/5\" || room == \"5/1\")\n{\n    koeladres = room + \"/8\";\n}\nelse if(room == \"4/1\")\n{\n    koeladres = room + \"/9\";\n}\nelse\n{\n    koeladres = room + \"/6\";\n}\n\n\nif(msg.knx.destination == koeladres)\n{\n    if(msg.payload)\n    {\n        msg.state = \"Verwarmen\";\n        msg.colour = \"color: #ff0000;\"\n    }\n    else\n    {\n        msg.state = \"Koelen\";\n        msg.colour = \"color: #00bfff;\"\n    }\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1860,
        "wires": [
            [
                "bfc0cf8220c0d9e4",
                "1d4d7c6d99de9f45"
            ]
        ]
    },
    {
        "id": "bfc0cf8220c0d9e4",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "a150eb2db750140b",
        "name": "Verwarmen / Koelen",
        "order": 7,
        "width": 7,
        "height": 5,
        "format": "<script src=\"https://kit.fontawesome.com/1d88fd5114.js\" crossorigin=\"anonymous\"></script>\n<style>\ntable, th, td {\n  border: 0px solid black;\n  text-align: center;\n  table-layout: fixed;\n  font-size: 25px;\n}\nth, td {\n  padding: 0px;\n}\n</style>\n<table width=\"100%\" height=\"100%\">\n<tr height=50px style=\"vertical-align: top;\">\n    <th>\n        <b>Ventilatie status</b>\n    </th>\n</tr>\n<tr>\n    <th>\n        <i class=\"fa-solid fa-fan fa-spin fa-5x\" style=\"{{msg.colour}}\"></i>\n    </th>\n</tr>\n<tr style=\"vertical-align: bottom;\">\n    <th>\n        <b>{{msg.state}}</b>\n    </th>\n</tr>\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1060,
        "y": 1860,
        "wires": [
            []
        ]
    },
    {
        "id": "ea393c981283ae4b",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "a150eb2db750140b",
        "name": "Bezet / Vrij",
        "order": 6,
        "width": 7,
        "height": 5,
        "format": "<script src=\"https://kit.fontawesome.com/1d88fd5114.js\" crossorigin=\"anonymous\"></script>\n\n<table width=\"100%\" height=\"100%\">\n<tr height=\"50px\" style=\"vertical-align: top;\">\n    <th>\n        <b>Bezetting</b>\n    </th>\n</tr>\n<tr>\n    <th>\n        <i class='fa-solid fa-5x {{msg.icon}}'></i>\n    </th>\n</tr>\n<tr style=\"vertical-align: bottom;\">\n    <th>\n        <b>{{msg.state}}</b>\n    </th>\n</tr>\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1030,
        "y": 1900,
        "wires": [
            []
        ]
    },
    {
        "id": "fb2e6fd72649b670",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Set icon",
        "func": "if(msg.topic == \"roomselect\")\n{\n    msg.icon = \"fa-solid fa-question\";\n    msg.state = \"Onbekend\";\n    return msg;\n}\nif(msg.knx.destination == (global.get(\"selectedRoom\") + \"/31\"))\n{\n    if(!msg.payload)\n    {\n        msg.icon = \"fa-users-slash\";\n        msg.state = \"Ruimte is vrij\";\n    }\n    else\n    {\n        msg.icon = \"fa-solid fa-users\";\n        msg.state = \"Ruimte is bezet\";\n    }\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 1900,
        "wires": [
            [
                "ea393c981283ae4b",
                "1d4d7c6d99de9f45"
            ]
        ]
    },
    {
        "id": "1d4d7c6d99de9f45",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "LastUpdate",
        "func": "const d = new Date();\nlet time = d.getTime();\nmsg.payload = Math.round((time - global.get(\"lastUpdate\")) / 1000);\n\nif(msg.topic == \"roomselect\")\n{\n    return null;\n}\nchecklist = global.get(\"knxCheckList\") || {};\n\nif(msg.topic == \"knxList\")\n{\n    checklist[msg.destination] = false;\n    return null;\n}\nif(msg.devicename != undefined)\n{\n    checklist[msg.knx.destination] = true;\n    allTrue = true;\n    for(var address in checklist)\n    {\n        if (!checklist[address] && address != \"3/2/31\" && address != \"3/5/31\" && address != \"4/5/31\" && address != \"2/1/6\" && address != \"3/5/6\" && address != \"4/5/6\") \n        {\n            allTrue = false;\n            break;\n        }\n    }\n    if(allTrue)\n    {\n        global.set(\"lastUpdate\", time);\n        for(address in checklist)\n        {\n            checklist[address] = false;\n        }\n    }\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1980,
        "wires": [
            [
                "129c29313dfa9404"
            ]
        ]
    },
    {
        "id": "a3b3ecf58da0c660",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "HVK",
        "func": "msg.payload = \n{\n   'address' : '40072', \n   'quantity': '40',\n}\nmsg.topic = \"Verkerk HVK\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 820,
        "wires": [
            [
                "f20858f876d3fb1a"
            ]
        ]
    },
    {
        "id": "f20858f876d3fb1a",
        "type": "modbus-flex-getter",
        "z": "e7a7e61768dadc02",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "e17dd53ddf6d2008",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 550,
        "y": 820,
        "wires": [
            [
                "6d2ac88a7d32c65d"
            ],
            []
        ]
    },
    {
        "id": "129c29313dfa9404",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "a150eb2db750140b",
        "name": "Laatst geupdate",
        "order": 8,
        "width": 14,
        "height": 1,
        "format": "<script src=\"https://kit.fontawesome.com/1d88fd5114.js\" crossorigin=\"anonymous\"></script>\n<style>\n.display\n{\n    font-weight: bold;\n    justify-content: center;\n}\n</style>\n\n<div class=\"display\">\n    <i class=\"fa-regular fa-circle-dot fa-fade fa-2sm\" style=\"color: #00ff00;\"></i>\n    Laatst volledig geüpdatet {{msg.payload}} seconden geleden \n</div>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 1240,
        "y": 1980,
        "wires": [
            []
        ]
    },
    {
        "id": "646b3012069be12b",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "HVK VSS",
        "func": "msg.payload = \n{\n   'address' : '40072', \n   'quantity': '40',\n}\nmsg.topic = \"VSS HVK\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 860,
        "wires": [
            [
                "bc60818cdc9af360"
            ]
        ]
    },
    {
        "id": "bc60818cdc9af360",
        "type": "modbus-flex-getter",
        "z": "e7a7e61768dadc02",
        "name": "",
        "showStatusActivities": true,
        "showErrors": true,
        "logIOActivities": false,
        "server": "cd8c77187d64ce96",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 550,
        "y": 860,
        "wires": [
            [
                "7fa648cb2a3b3ad2"
            ],
            []
        ]
    },
    {
        "id": "282b13be375e5999",
        "type": "ui_gauge",
        "z": "e7a7e61768dadc02",
        "name": "",
        "group": "4c7a2afe4e5b67d1",
        "order": 2,
        "width": 8,
        "height": 5,
        "gtype": "gage",
        "title": "VSS Verbruik",
        "label": "kW",
        "format": "{{value}}",
        "min": 0,
        "max": "39",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 630,
        "y": 1380,
        "wires": []
    },
    {
        "id": "7fa648cb2a3b3ad2",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "VSS Verbruik",
        "func": "P = msg.payload[15] / 100;\ni1 = msg.payload[0];\ni2 = msg.payload[1];\ni3 = msg.payload[2];\np1 = msg.payload[16];\np2 = msg.payload[17];\np3 = msg.payload[18];\nif(global.get(\"showPower\"))\n{\n    msg.unit = \"kW\";\n    msg.max = 13;\n    msg.L1v = Math.round(p1 / 10) / 10;\n    msg.L2v = Math.round(p2 / 10) / 10;\n    msg.L3v = Math.round(p3 / 10) / 10;\n}\nelse\n{\n    msg.unit = \"A\";\n    msg.max = 63;\n    msg.L1v = Math.round(i1 / 10) / 10;\n    msg.L2v = Math.round(i2 / 10) / 10;\n    msg.L3v = Math.round(i3 / 10) / 10;\n}\nmsg.payload = Math.round(P * 10) / 10;\n\n  \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1380,
        "wires": [
            [
                "282b13be375e5999",
                "c4679322cbcd577c"
            ]
        ]
    },
    {
        "id": "0375a5ef50ce8fa8",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "ProcessData",
        "func": "max = msg.max;\nif(msg.L1v > max)\n{\n    msg.L1v = max;\n}\nif(msg.L2v > max)\n{\n    msg.L2v = max;\n}\nif(msg.L3v > max)\n{\n    msg.L3v = max;\n}\npercentage1 = Math.round((msg.L1v/max) * 100);\npercentage2 = Math.round((msg.L2v/max) * 100);\npercentage3 = Math.round((msg.L3v/max) * 100);\nmsg.L1p = percentage1;\nmsg.L2p = percentage2;\nmsg.L3p = percentage3;\ncolour = [];\ncolour[0] = getcolor(percentage1);\ncolour[1] = getcolor(percentage2);\ncolour[2] = getcolor(percentage3);\nmsg.color = colour;\nfunction lerpColor(a, b, amount) \n    {\n        var ah = parseInt(a.replace(/#/g, ''), 16),\n        ar = ah >> 16, ag = ah >> 8 & 0xff, ab = ah & 0xff,\n        bh = parseInt(b.replace(/#/g, ''), 16),\n        br = bh >> 16, bg = bh >> 8 & 0xff, bb = bh & 0xff,\n        rr = ar + amount * (br - ar),\n        rg = ag + amount * (bg - ag),\n        rb = ab + amount * (bb - ab);\n        return (\"#\" + ((1 << 24) + (rr << 16) + (rg << 8) + rb).toString(16).slice(1)).slice(0, 7);\n    }\n  \n  function getcolor(value) \n  {\n    var percentage = parseFloat(value);\n    var color;\n    if (percentage < 50) {\n      amount = percentage / 50;\n      color = lerpColor(\"#00b500\", \"#e6e600\", amount);\n    } else {\n      amount = (percentage - 50) / 50;\n      color = lerpColor(\"#e6e600\", \"#ca3838\", amount);\n    }\n    return color;\n  }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1160,
        "wires": [
            [
                "5e69d39be937b2ac"
            ]
        ]
    },
    {
        "id": "5acfbf04133f705a",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "ProcessData",
        "func": "max = msg.max;\npercentage1 = Math.round((msg.L1v/max) * 100);\npercentage2 = Math.round((msg.L2v/max) * 100);\npercentage3 = Math.round((msg.L3v/max) * 100);\nmsg.L1p = percentage1;\nmsg.L2p = percentage2;\nmsg.L3p = percentage3;\ncolour = [];\ncolour[0] = getcolor(percentage1);\ncolour[1] = getcolor(percentage2);\ncolour[2] = getcolor(percentage3);\nmsg.color = colour;\nfunction lerpColor(a, b, amount) \n    {\n        var ah = parseInt(a.replace(/#/g, ''), 16),\n        ar = ah >> 16, ag = ah >> 8 & 0xff, ab = ah & 0xff,\n        bh = parseInt(b.replace(/#/g, ''), 16),\n        br = bh >> 16, bg = bh >> 8 & 0xff, bb = bh & 0xff,\n        rr = ar + amount * (br - ar),\n        rg = ag + amount * (bg - ag),\n        rb = ab + amount * (bb - ab);\n        return (\"#\" + ((1 << 24) + (rr << 16) + (rg << 8) + rb).toString(16).slice(1)).slice(0, 7);\n    }\n  \n  function getcolor(value) \n  {\n    var percentage = parseFloat(value);\n    var color;\n    if (percentage < 50) {\n      amount = percentage / 50;\n      color = lerpColor(\"#00b500\", \"#e6e600\", amount);\n    } else {\n      amount = (percentage - 50) / 50;\n      color = lerpColor(\"#e6e600\", \"#ca3838\", amount);\n    }\n    return color;\n  }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 1240,
        "wires": [
            [
                "d3bbc463469c9b35"
            ]
        ]
    },
    {
        "id": "c4679322cbcd577c",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "ProcessData",
        "func": "max = msg.max;\nif(msg.L1v > max)\n{\n    msg.L1v = max;\n}\nif(msg.L2v > max)\n{\n    msg.L2v = max;\n}\nif(msg.L3v > max)\n{\n    msg.L3v = max;\n}\npercentage1 = Math.round((msg.L1v/max) * 100);\npercentage2 = Math.round((msg.L2v/max) * 100);\npercentage3 = Math.round((msg.L3v/max) * 100);\nmsg.L1p = percentage1;\nmsg.L2p = percentage2;\nmsg.L3p = percentage3;\ncolour = [];\ncolour[0] = getcolor(percentage1);\ncolour[1] = getcolor(percentage2);\ncolour[2] = getcolor(percentage3);\nmsg.color = colour;\nfunction lerpColor(a, b, amount) \n    {\n        var ah = parseInt(a.replace(/#/g, ''), 16),\n        ar = ah >> 16, ag = ah >> 8 & 0xff, ab = ah & 0xff,\n        bh = parseInt(b.replace(/#/g, ''), 16),\n        br = bh >> 16, bg = bh >> 8 & 0xff, bb = bh & 0xff,\n        rr = ar + amount * (br - ar),\n        rg = ag + amount * (bg - ag),\n        rb = ab + amount * (bb - ab);\n        return (\"#\" + ((1 << 24) + (rr << 16) + (rg << 8) + rb).toString(16).slice(1)).slice(0, 7);\n    }\n  \n  function getcolor(value) \n  {\n    var percentage = parseFloat(value);\n    var color;\n    if (percentage < 50) {\n      amount = percentage / 50;\n      color = lerpColor(\"#00b500\", \"#e6e600\", amount);\n    } else {\n      amount = (percentage - 50) / 50;\n      color = lerpColor(\"#e6e600\", \"#ca3838\", amount);\n    }\n    return color;\n  }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1380,
        "wires": [
            [
                "c9129fa52923914d"
            ]
        ]
    },
    {
        "id": "3532401f2d38e9ec",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "ProcessData",
        "func": "max = msg.max;\nif(msg.L1v > max)\n{\n    msg.L1v = max;\n}\nif(msg.L2v > max)\n{\n    msg.L2v = max;\n}\nif(msg.L3v > max)\n{\n    msg.L3v = max;\n}\npercentage1 = Math.round((msg.L1v/max) * 100);\npercentage2 = Math.round((msg.L2v/max) * 100);\npercentage3 = Math.round((msg.L3v/max) * 100);\nmsg.L1p = percentage1;\nmsg.L2p = percentage2;\nmsg.L3p = percentage3;\ncolour = [];\ncolour[0] = getcolor(percentage1);\ncolour[1] = getcolor(percentage2);\ncolour[2] = getcolor(percentage3);\nmsg.color = colour;\nfunction lerpColor(a, b, amount) \n    {\n        var ah = parseInt(a.replace(/#/g, ''), 16),\n        ar = ah >> 16, ag = ah >> 8 & 0xff, ab = ah & 0xff,\n        bh = parseInt(b.replace(/#/g, ''), 16),\n        br = bh >> 16, bg = bh >> 8 & 0xff, bb = bh & 0xff,\n        rr = ar + amount * (br - ar),\n        rg = ag + amount * (bg - ag),\n        rb = ab + amount * (bb - ab);\n        return (\"#\" + ((1 << 24) + (rr << 16) + (rg << 8) + rb).toString(16).slice(1)).slice(0, 7);\n    }\n  \n  function getcolor(value) \n  {\n    var percentage = parseFloat(value);\n    var color;\n    if (percentage < 50) {\n      amount = percentage / 50;\n      color = lerpColor(\"#00b500\", \"#e6e600\", amount);\n    } else {\n      amount = (percentage - 50) / 50;\n      color = lerpColor(\"#e6e600\", \"#ca3838\", amount);\n    }\n    return color;\n  }\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 1340,
        "wires": [
            [
                "b091618ea71ce95b"
            ]
        ]
    },
    {
        "id": "c9129fa52923914d",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "07da38dabb79ce59",
        "name": "Bar chart",
        "order": 3,
        "width": 8,
        "height": 5,
        "format": "<style>\n.title\n{\n    display: flex;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 22px;\n}\n.mainchart\n{\n    display: flex;\n    justify-content: center;\n    position: relative;\n    height: 100%;\n}\n.barchart {\n  display: flex;\n  position: relative;\n  align-items: flex-end;\n  height: 100%;\n  background-color: transparent;\n}\n\n.bar {\n    position: relative;\n    width: 60px;\n    transition: height 0.5s ease-out;\n    z-index: 3;\n    margin-right: 10px;\n}\n.greybar{\n    position: absolute;\n    z-index: 2;\n    width: 60px;\n    height: 100%;\n    background-color: #7f7f7f;\n    margin-right: 10px;\n    opacity: 0.5;\n}\n.greybar:nth-of-type(4) {\n    transform: translateX(0px);\n}\n.greybar:nth-of-type(5) {\n    transform: translateX(70px);\n}\n.greybar:nth-of-type(6) {\n    transform: translateX(140px);\n}\n.bar:last-child {\n    margin-right: 0;\n}\n\n.bar::after {\n    content: attr(data-value);\n    display: block;\n    text-align: center;\n    font-weight: bold;\n    margin-top: -20px !important;\n}\n\n.labels {\n    display: flex;\n    justify-content: center;\n    margin-top: 2px;\n}\n\n.labels span {\n    width: 70px;\n    text-align: center;\n    font-weight: bold;\n}\n</style>\n\n<html>\n<div class=\"title\">{{msg.topic}}</div>\n<div class=\"mainchart\">\n  <div class=\"barchart\">\n    <div class=\"bar\" data-value=\"{{msg.L1v}}{{msg.unit}}\" style=\"height: {{msg.L1p}}%; background-color:{{msg.color[0]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L2v}}{{msg.unit}}\" style=\"height: {{msg.L2p}}%; background-color:{{msg.color[1]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L3v}}{{msg.unit}}\" style=\"height: {{msg.L3p}}%; background-color:{{msg.color[2]}}\"></div>\n    \n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n </div>\n</div>\n\n<div class=\"labels\">\n  <span>L1</span>\n  <span>L2</span>\n  <span>L3</span>\n</div>\n\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "b091618ea71ce95b",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "07da38dabb79ce59",
        "name": "Bar chart",
        "order": 2,
        "width": 8,
        "height": 5,
        "format": "<style>\n.title\n{\n    display: flex;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 22px;\n}\n.mainchart\n{\n    display: flex;\n    justify-content: center;\n    position: relative;\n    height: 100%;\n}\n.barchart {\n  display: flex;\n  position: relative;\n  align-items: flex-end;\n  height: 100%;\n  background-color: transparent;\n}\n\n.bar {\n    position: relative;\n    width: 60px;\n    transition: height 0.5s ease-out;\n    z-index: 3;\n    margin-right: 10px;\n}\n.greybar{\n    position: absolute;\n    z-index: 2;\n    width: 60px;\n    height: 100%;\n    background-color: #7f7f7f;\n    margin-right: 10px;\n    opacity: 0.5;\n}\n.greybar:nth-of-type(4) {\n    transform: translateX(0px);\n}\n.greybar:nth-of-type(5) {\n    transform: translateX(70px);\n}\n.greybar:nth-of-type(6) {\n    transform: translateX(140px);\n}\n.bar:last-child {\n    margin-right: 0;\n}\n\n.bar::after {\n    content: attr(data-value);\n    display: block;\n    text-align: center;\n    font-weight: bold;\n    margin-top: -20px !important;\n}\n\n.labels {\n    display: flex;\n    justify-content: center;\n    margin-top: 2px;\n}\n\n.labels span {\n    width: 70px;\n    text-align: center;\n    font-weight: bold;\n}\n</style>\n\n<html>\n<div class=\"title\">{{msg.topic}}</div>\n<div class=\"mainchart\">\n  <div class=\"barchart\">\n    <div class=\"bar\" data-value=\"{{msg.L1v}}{{msg.unit}}\" style=\"height: {{msg.L1p}}%; background-color:{{msg.color[0]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L2v}}{{msg.unit}}\" style=\"height: {{msg.L2p}}%; background-color:{{msg.color[1]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L3v}}{{msg.unit}}\" style=\"height: {{msg.L3p}}%; background-color:{{msg.color[2]}}\"></div>\n    \n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n </div>\n</div>\n\n<div class=\"labels\">\n  <span>L1</span>\n  <span>L2</span>\n  <span>L3</span>\n</div>\n\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 960,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "5e69d39be937b2ac",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "5d6053dc4dae5e70",
        "name": "Bar chart",
        "order": 1,
        "width": 8,
        "height": 5,
        "format": "<style>\n.title\n{\n    display: flex;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 22px;\n}\n.mainchart\n{\n    display: flex;\n    justify-content: center;\n    position: relative;\n    height: 100%;\n}\n.barchart {\n  display: flex;\n  position: relative;\n  align-items: flex-end;\n  height: 100%;\n  background-color: transparent;\n}\n\n.bar {\n    position: relative;\n    width: 60px;\n    transition: height 0.5s ease-out;\n    z-index: 3;\n    margin-right: 10px;\n}\n.greybar{\n    position: absolute;\n    z-index: 2;\n    width: 60px;\n    height: 100%;\n    background-color: #7f7f7f;\n    margin-right: 10px;\n    opacity: 0.5;\n}\n.greybar:nth-of-type(4) {\n    transform: translateX(0px);\n}\n.greybar:nth-of-type(5) {\n    transform: translateX(70px);\n}\n.greybar:nth-of-type(6) {\n    transform: translateX(140px);\n}\n.bar:last-child {\n    margin-right: 0;\n}\n\n.bar::after {\n    content: attr(data-value);\n    display: block;\n    text-align: center;\n    font-weight: bold;\n    margin-top: -20px !important;\n}\n\n.labels {\n    display: flex;\n    justify-content: center;\n    margin-top: 2px;\n}\n\n.labels span {\n    width: 70px;\n    text-align: center;\n    font-weight: bold;\n}\n</style>\n\n<html>\n<div class=\"title\">{{msg.topic}}</div>\n<div class=\"mainchart\">\n  <div class=\"barchart\">\n    <div class=\"bar\" data-value=\"{{msg.L1v}}{{msg.unit}}\" style=\"height: {{msg.L1p}}%; background-color:{{msg.color[0]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L2v}}{{msg.unit}}\" style=\"height: {{msg.L2p}}%; background-color:{{msg.color[1]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L3v}}{{msg.unit}}\" style=\"height: {{msg.L3p}}%; background-color:{{msg.color[2]}}\"></div>\n    \n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n </div>\n</div>\n\n<div class=\"labels\">\n  <span>L1</span>\n  <span>L2</span>\n  <span>L3</span>\n</div>\n\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 1140,
        "wires": [
            []
        ]
    },
    {
        "id": "d3bbc463469c9b35",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "f153a68c5d515033",
        "name": "Bar chart",
        "order": 1,
        "width": 8,
        "height": 5,
        "format": "<style>\n.title\n{\n    display: flex;\n    justify-content: center;\n    font-weight: bold;\n    font-size: 22px;\n}\n.mainchart\n{\n    display: flex;\n    justify-content: center;\n    position: relative;\n    height: 100%;\n}\n.barchart {\n  display: flex;\n  position: relative;\n  align-items: flex-end;\n  height: 100%;\n  background-color: transparent;\n}\n\n.bar {\n    position: relative;\n    width: 60px;\n    transition: height 0.5s ease-out;\n    z-index: 3;\n    margin-right: 10px;\n}\n.greybar{\n    position: absolute;\n    z-index: 2;\n    width: 60px;\n    height: 100%;\n    background-color: #7f7f7f;\n    margin-right: 10px;\n    opacity: 0.5;\n}\n.greybar:nth-of-type(4) {\n    transform: translateX(0px);\n}\n.greybar:nth-of-type(5) {\n    transform: translateX(70px);\n}\n.greybar:nth-of-type(6) {\n    transform: translateX(140px);\n}\n.bar:last-child {\n    margin-right: 0;\n}\n\n.bar::after {\n    content: attr(data-value);\n    display: block;\n    text-align: center;\n    font-weight: bold;\n    margin-top: -20px !important;\n}\n\n.labels {\n    display: flex;\n    justify-content: center;\n    margin-top: 2px;\n}\n\n.labels span {\n    width: 70px;\n    text-align: center;\n    font-weight: bold;\n}\n</style>\n\n<html>\n<div class=\"title\">{{msg.topic}}</div>\n<div class=\"mainchart\">\n  <div class=\"barchart\">\n    <div class=\"bar\" data-value=\"{{msg.L1v}}{{msg.unit}}\" style=\"height: {{msg.L1p}}%; background-color:{{msg.color[0]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L2v}}{{msg.unit}}\" style=\"height: {{msg.L2p}}%; background-color:{{msg.color[1]}}\"></div>\n    <div class=\"bar\" data-value=\"{{msg.L3v}}{{msg.unit}}\" style=\"height: {{msg.L3p}}%; background-color:{{msg.color[2]}}\"></div>\n    \n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n    <div class=\"greybar\"></div>\n </div>\n</div>\n\n<div class=\"labels\">\n  <span>L1</span>\n  <span>L2</span>\n  <span>L3</span>\n</div>\n\n</html>\n\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 780,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "b40a41c847899e90",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "dfda6830323e39d4",
        "name": "Koffie teller",
        "order": 2,
        "width": "8",
        "height": "4",
        "format": "<script src=\"https://kit.fontawesome.com/1d88fd5114.js\" crossorigin=\"anonymous\"></script>\n<style>\n.coffeecup\n{\n    height: 100px;\n    width: 30%;\n    font-size:20px;\n    padding-bottom: 0px;\n}\n.coffeetext\n{\n    font-size:25px;\n    font-weight:bold;\n    text-align: center;\n    padding-bottom: 20px;\n}\n.coffeenum\n{\n    width: 396px;\n    color: #333333;\n    z-index: 2;\n    position: absolute;\n    padding-top: 5px;\n    font-weight: bold;\n    font-size: 35px;\n}\n</style>\n\n<table class=\"display\">\n    <tr>\n        <td class=\"coffeecup\">\n            <div class=\"coffeenum\">{{msg.coffeecount}}</div>\n            <i class=\"fa-solid fa-mug-saucer fa-4x\"></i>\n        </td>\n    </tr>\n    <tr>\n        <td class=\"coffeetext\">\n            Kopjes gezet vandaag\n        </td>\n    </tr>\n</table>\n",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 630,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "d29e88bfcdb392ab",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "get Coffee",
        "func": "msg.coffeecount = global.get(\"koffieCounter\") || 0;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1580,
        "wires": [
            [
                "b40a41c847899e90"
            ]
        ]
    },
    {
        "id": "528ccea16994d70e",
        "type": "e-mail",
        "z": "e7a7e61768dadc02",
        "server": "mail.vbtbeheer.nl",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "Send",
        "x": 1870,
        "y": 820,
        "wires": []
    },
    {
        "id": "1361a6f0805b65c8",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Create Email",
        "func": "var dataIn = msg.payload;\nvar errorCount = 0;\nvar tableCount = 0;\nmsg.payload = \"<table border='2'>\";\nmsg.payload += \"<tr><th>\";\nfor(i = 0; i < dataIn.length; i ++)\n{\n    if(dataIn[i].Active)\n    {\n        errorCount++;\n        msg.payload += \"<th>Overload \" + errorCount;\n    }\n}\nmsg.payload += \"<tr><td><b>Groep</b></td>\";\nfor(i = 0; i < dataIn.length; i ++)\n{\n    if(dataIn[i].Active)\n    {\n        msg.payload += \"<td>\" + dataIn[i].Groep + \"</td>\";\n    }\n}\nmsg.payload += \"<tr><td><b>Fase</b></td>\";\nfor(i = 0; i < dataIn.length; i ++)\n{\n    if(dataIn[i].Active)\n    {\n        msg.payload += \"<td>\" + dataIn[i].Phase + \"</td>\";\n    }\n}\nmsg.payload += \"<tr><td><b>Waarde</b></td><FONT COLOR='#ff0000'>\";\nfor(i = 0; i < dataIn.length; i ++)\n{\n    if(dataIn[i].Active)\n    {\n        msg.payload += \"<td>\" + dataIn[i].Value + \" mA</td>\";\n    }\n}\nmsg.payload += \"</FONT><tr><td><b>Alarm bij</b></td>\";\nfor(i = 0; i < dataIn.length; i ++)\n{\n    if(dataIn[i].Active)\n    {\n        msg.payload += \"<td>\" + dataIn[i].Max + \" mA</td>\";\n    }\n}\nmsg.payload += \"<FONT COLOR='#808080'><tr><td><b>Contactpersoon</b></td>\";\nfor(i = 0; i < dataIn.length; i ++)\n{\n    if(dataIn[i].Active)\n    {\n        msg.payload += \"<td>\" + dataIn[i].MailTo + \"</td>\";\n    }\n}\nmsg.payload += \"</FONT></table>\";\nmsg.payload += \"<br><br><br><br><br><br><br>\";\nmsg.payload += \"Overige metingen: <br><br>\";\nmsg.to = dataIn[0].MailTo;\nfor(i = 0; i < dataIn.length; i++)\n{\n    if(!dataIn[i.Active])\n    {\n        msg.payload += dataIn[i].Kast + \"<br> Groep: \" + dataIn[i].Groep + \"<br> Fase: \" + dataIn[i].Phase + \"<br> Waarde: \" + dataIn[i].Value + \"mA<br> Alarm bij: \" + dataIn[i].Max + \"mA<br><br>\";\n    }\n}\nif(errorCount == 1)\n{\n    msg.topic = \"Overbelasting in één groep\";\n}\nelse\n{\n    msg.topic = \"Overbelasting in \" + errorCount + \" groepen\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 820,
        "wires": [
            [
                "528ccea16994d70e"
            ]
        ]
    },
    {
        "id": "564f8af0836e9948",
        "type": "delay",
        "z": "e7a7e61768dadc02",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "10",
        "rateUnits": "minute",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1520,
        "y": 820,
        "wires": [
            [
                "1361a6f0805b65c8"
            ]
        ]
    },
    {
        "id": "a20ebfe62574e0f2",
        "type": "ui_toast",
        "z": "e7a7e61768dadc02",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": true,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "className": "",
        "topic": "",
        "name": "",
        "x": 1910,
        "y": 860,
        "wires": []
    },
    {
        "id": "1c39a07eb8340914",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Create notification",
        "func": "var dataIn = msg.payload;\nfor(i = 0; i < dataIn.length; i ++)\n{\n    if(dataIn[i].Active)\n    {\n        msg.payload = \"Warning, Overload in \" + dataIn[i].Groep;\n        return msg;\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 860,
        "wires": [
            [
                "a20ebfe62574e0f2"
            ]
        ]
    },
    {
        "id": "968b5b2b353a5f98",
        "type": "delay",
        "z": "e7a7e61768dadc02",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "30",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1520,
        "y": 860,
        "wires": [
            [
                "1c39a07eb8340914"
            ]
        ]
    },
    {
        "id": "9de6c93d48708159",
        "type": "delay",
        "z": "e7a7e61768dadc02",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "30",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 1520,
        "y": 900,
        "wires": [
            [
                "39c7dd0e78d5e854"
            ]
        ]
    },
    {
        "id": "39c7dd0e78d5e854",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "increment coffee counter",
        "func": "global.set(\"koffieCounter\", (global.get(\"koffieCounter\") || 0) + 1);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1730,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "e1dc93d32e27fb67",
        "type": "switch",
        "z": "e7a7e61768dadc02",
        "name": "koffie?",
        "property": "payload[23].Active",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1350,
        "y": 860,
        "wires": [
            [
                "968b5b2b353a5f98",
                "564f8af0836e9948"
            ],
            [
                "9de6c93d48708159"
            ]
        ]
    },
    {
        "id": "d7a12d9eaf16e3d6",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Temp",
        "func": "var room = global.get(\"selectedRoom\");\nmsg.destination = room + \"/1\";\nmsg.dpt = \"9.001\";\nmsg.readstatus = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1700,
        "wires": [
            [
                "64c89f932c202414",
                "52db64bcec4d8173"
            ]
        ]
    },
    {
        "id": "4f90790088d25dbf",
        "type": "ui_dropdown",
        "z": "e7a7e61768dadc02",
        "name": "",
        "label": "Ruimte",
        "tooltip": "Selecteer een ruimte",
        "place": "Select option",
        "group": "a150eb2db750140b",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "(Kubus - BG) 0.04",
                "value": "2/1",
                "type": "str"
            },
            {
                "label": "(Kubus - BG) 0.05",
                "value": "2/2",
                "type": "str"
            },
            {
                "label": "(Kubus - BG) 0.06",
                "value": "2/3",
                "type": "str"
            },
            {
                "label": "(Kubus - BG) 0.11",
                "value": "2/4",
                "type": "str"
            },
            {
                "label": "(Kubus - BG) 0.12",
                "value": "2/5",
                "type": "str"
            },
            {
                "label": "(Kubus - 1e) 1.07",
                "value": "3/1",
                "type": "str"
            },
            {
                "label": "(Kubus - 1e) 1.11",
                "value": "3/2",
                "type": "str"
            },
            {
                "label": "(Kubus - 1e) 1.12",
                "value": "3/3",
                "type": "str"
            },
            {
                "label": "(Kubus - 1e) 1.13-1",
                "value": "3/4",
                "type": "str"
            },
            {
                "label": "(Kubus - 1e) 1.13-2",
                "value": "3/5",
                "type": "str"
            },
            {
                "label": "(Banaan - BG) 0.01",
                "value": "4/1",
                "type": "str"
            },
            {
                "label": "(Banaan - BG) 0.03",
                "value": "4/2",
                "type": "str"
            },
            {
                "label": "(Banaan - BG) 0.07",
                "value": "4/3",
                "type": "str"
            },
            {
                "label": "(Banaan - BG) 0.08",
                "value": "4/4",
                "type": "str"
            },
            {
                "label": "(Banaan - BG) 0.14",
                "value": "4/5",
                "type": "str"
            },
            {
                "label": "(Banaan - 1e) 1.01",
                "value": "5/1",
                "type": "str"
            },
            {
                "label": "(Banaan - 1e) 1.02",
                "value": "5/2",
                "type": "str"
            },
            {
                "label": "(Banaan - 1e) 1.03",
                "value": "5/3",
                "type": "str"
            },
            {
                "label": "(Banaan - 1e) 1.04",
                "value": "5/4",
                "type": "str"
            },
            {
                "label": "(Banaan - 1e) 1.05",
                "value": "5/5",
                "type": "str"
            },
            {
                "label": "(Banaan - 1e) 1.06",
                "value": "5/6",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "roomselect",
        "topicType": "str",
        "className": "",
        "x": 340,
        "y": 2060,
        "wires": [
            [
                "6bb3e7b8d42e44c9",
                "fb2e6fd72649b670",
                "64ee9f5956a0de0f"
            ]
        ]
    },
    {
        "id": "6bb3e7b8d42e44c9",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "set selected room",
        "func": "if(msg.topic == \"roomselect\")\n{\n    global.set(\"selectedRoom\", msg.payload);\n    global.set(\"knxCheckList\", {});\n    msg.topic = \"knxList\";\n}\nif(msg.unit == undefined)\n{\n    msg.unit = \"all\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 170,
        "y": 1880,
        "wires": [
            [
                "c773a6e56e9cc5c8"
            ]
        ]
    },
    {
        "id": "abd0dfe3eb186f82",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "CO2",
        "func": "var room = global.get(\"selectedRoom\");\nmsg.destination = room + \"/21\";\nmsg.dpt = \"9.008\";\nmsg.readstatus = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1740,
        "wires": [
            [
                "64c89f932c202414",
                "52db64bcec4d8173"
            ]
        ]
    },
    {
        "id": "23dcecde21618d86",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Lux",
        "func": "var room = global.get(\"selectedRoom\");\nmsg.destination = room + \"/41\";\nmsg.dpt = \"7.013\";\nmsg.readstatus = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1780,
        "wires": [
            [
                "64c89f932c202414",
                "52db64bcec4d8173"
            ]
        ]
    },
    {
        "id": "a1e9e3fec670d436",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Humidity",
        "func": "var room = global.get(\"selectedRoom\");\nmsg.destination = room + \"/11\";\nmsg.dpt = \"9.007\";\nmsg.readstatus = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1820,
        "wires": [
            [
                "64c89f932c202414",
                "52db64bcec4d8173"
            ]
        ]
    },
    {
        "id": "0dc997d873d82fd4",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "V/K",
        "func": "var room = global.get(\"selectedRoom\");\nif(room == \"3/4\" || room == \"4/4\" || room == \"5/2\")\n{\n    msg.destination = room + \"/7\";\n}\nelse if(room == \"2/5\" || room == \"5/1\")\n{\n    msg.destination = room + \"/8\";\n}\nelse if(room == \"4/1\")\n{\n    msg.destination = room + \"/9\";\n}\nelse\n{\n    msg.destination = room + \"/6\";\n}\nmsg.dpt = \"1.100\";\nmsg.readstatus = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1860,
        "wires": [
            [
                "64c89f932c202414",
                "52db64bcec4d8173"
            ]
        ]
    },
    {
        "id": "9b436f4038605f30",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "Aanw.",
        "func": "var room = global.get(\"selectedRoom\");\nmsg.destination = room + \"/31\";\nmsg.dpt = \"1.001\";\nmsg.readstatus = true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1900,
        "wires": [
            [
                "64c89f932c202414",
                "52db64bcec4d8173"
            ]
        ]
    },
    {
        "id": "e30f31a38984b949",
        "type": "ui_template",
        "z": "e7a7e61768dadc02",
        "group": "c046c69f0bc31d6b",
        "name": "Plattegrond",
        "order": 1,
        "width": 20,
        "height": 17,
        "format": "<script>\n(function() \n{\n    //define global vars\n    window.myRooms = []\n    //----------VERDIEPING BG------------//\n    myRooms[1] = {};\n    myRooms[1].knx = \"4/1\";\n    myRooms[1].rect = \"rect\" + myRooms[1].knx.replace(\"/\", \"_\");\n    myRooms[1].grp = \"grpRm0.01\";\n    myRooms[1].floor = 0;\n    \n    myRooms[3] = {};\n    myRooms[3].knx = \"4/2\";\n    myRooms[3].rect = \"rect\" + myRooms[3].knx.replace(\"/\", \"_\");\n    myRooms[3].grp = \"grpRm0.03\";\n    myRooms[3].floor = 0;\n    \n    myRooms[4] = {};\n    myRooms[4].knx = \"2/1\";\n    myRooms[4].rect = \"rect\" + myRooms[4].knx.replace(\"/\", \"_\");\n    myRooms[4].grp = \"grpRm0.04\";\n    myRooms[4].floor = 0;\n    \n    myRooms[5] = {};\n    myRooms[5].knx = \"2/2\";\n    myRooms[5].rect = \"rect\" + myRooms[5].knx.replace(\"/\", \"_\");\n    myRooms[5].grp = \"grpRm0.05\";\n    myRooms[5].floor = 0;\n    \n    myRooms[6] = {};\n    myRooms[6].knx = \"2/3\";\n    myRooms[6].rect = \"rect\" + myRooms[6].knx.replace(\"/\", \"_\");\n    myRooms[6].grp = \"grpRm0.06\";\n    myRooms[6].floor = 0;\n    \n    myRooms[7] = {};\n    myRooms[7].knx = \"4/3\";\n    myRooms[7].rect = \"rect\" + myRooms[7].knx.replace(\"/\", \"_\");\n    myRooms[7].grp = \"grpRm0.07\";\n    myRooms[7].floor = 0;\n    \n    myRooms[8] = {};\n    myRooms[8].knx = \"4/4\";\n    myRooms[8].rect = \"rect\" + myRooms[8].knx.replace(\"/\", \"_\");\n    myRooms[8].grp = \"grpRm0.08\";\n    myRooms[8].floor = 0;\n    \n    myRooms[11] = {};\n    myRooms[11].knx = \"2/4\";\n    myRooms[11].rect = \"rect\" + myRooms[11].knx.replace(\"/\", \"_\");\n    myRooms[11].grp = \"grpRm0.11\";\n    myRooms[11].floor = 0;\n    \n    myRooms[12] = {};\n    myRooms[12].knx = \"2/5\";\n    myRooms[12].rect = \"rect\" + myRooms[12].knx.replace(\"/\", \"_\");\n    myRooms[12].grp = \"grpRm0.12\";\n    myRooms[12].floor = 0;\n    \n    //----------VERDIEPING 1------------//\n    \n    myRooms[101] = {};\n    myRooms[101].knx = \"5/1\";\n    myRooms[101].rect = \"rect\" + myRooms[101].knx.replace(\"/\", \"_\");\n    myRooms[101].grp = \"grpRm1.01\";\n    myRooms[101].floor = 1;\n    \n    myRooms[102] = {};\n    myRooms[102].knx = \"5/2\";\n    myRooms[102].rect = \"rect\" + myRooms[102].knx.replace(\"/\", \"_\");\n    myRooms[102].grp = \"grpRm1.02\";\n    myRooms[102].floor = 1;\n    \n    myRooms[103] = {};\n    myRooms[103].knx = \"5/3\";\n    myRooms[103].rect = \"rect\" + myRooms[103].knx.replace(\"/\", \"_\");\n    myRooms[103].grp = \"grpRm1.03\";\n    myRooms[103].floor = 1;\n    \n    myRooms[104] = {};\n    myRooms[104].knx = \"5/4\";\n    myRooms[104].rect = \"rect\" + myRooms[104].knx.replace(\"/\", \"_\");\n    myRooms[104].grp = \"grpRm1.04\";\n    myRooms[104].floor = 1;\n    \n    myRooms[105] = {};\n    myRooms[105].knx = \"5/5\";\n    myRooms[105].rect = \"rect\" + myRooms[105].knx.replace(\"/\", \"_\");\n    myRooms[105].grp = \"grpRm1.05\";\n    myRooms[105].floor = 1;\n    \n    myRooms[106] = {};\n    myRooms[106].knx = \"5/6\";\n    myRooms[106].rect = \"rect\" + myRooms[106].knx.replace(\"/\", \"_\");\n    myRooms[106].grp = \"grpRm1.06\";\n    myRooms[106].floor = 1;\n    \n    myRooms[107] = {};\n    myRooms[107].knx = \"3/1\";\n    myRooms[107].rect = \"rect\" + myRooms[107].knx.replace(\"/\", \"_\");\n    myRooms[107].grp = \"grpRm1.07\";\n    myRooms[107].floor = 1;\n    \n    myRooms[111] = {};\n    myRooms[111].knx = \"3/2\";\n    myRooms[111].rect = \"rect\" + myRooms[111].knx.replace(\"/\", \"_\");\n    myRooms[111].grp = \"grpRm1.11\";\n    myRooms[111].floor = 1;\n    \n    myRooms[112] = {};\n    myRooms[112].knx = \"3/3\";\n    myRooms[112].rect = \"rect\" + myRooms[112].knx.replace(\"/\", \"_\");\n    myRooms[112].grp = \"grpRm1.12\";\n    myRooms[112].floor = 1;\n    \n    myRooms[113] = {};\n    myRooms[113].knx = \"3/4\";\n    myRooms[113].rect = \"rect\" + myRooms[113].knx.replace(\"/\", \"_\");\n    myRooms[113].grp = \"grpRm1.13\";\n    myRooms[113].floor = 1;\n    \n    \n    \n    window.svg = document.querySelector(\"#vssSVG\");\n    window.svgIcon = document.querySelector(\"#infoIcon\");\n    window.svgControlIcon = document.querySelector(\"#controlInfoIcon\") ;\n    \n    window.isLoop = false;\n    var counter = 0;\n    function loopFunction() \n    {\n        if(isLoop)\n        {\n            switch(counter)\n            {\n                case 0:\n                    if(selectedFloor == 0)\n                    {\n                        selectFloor(1);\n                    }\n                    else if(selectedFloor == 1)\n                    {\n                        selectFloor(0);\n                    }\n                    clickQuartre(\"T\", true);\n                    counter++;\n                    break;\n                case 1:\n                    clickQuartre(\"H\", true);\n                    counter++;\n                    break;\n                case 2:\n                    clickQuartre(\"L\", true);\n                    counter++;\n                    break;\n                case 3:\n                    clickQuartre(\"C\", true);\n                    counter = 0;\n                    break;\n                default:\n                    console.log(\"error in looping function\");\n            }\n        }\n    }\n    \n    function selectFloor(floor)\n    {\n        if(floor == 0)\n        {\n            svg.contentDocument.getElementById(\"LayerBG\").style.display = \"flex\"; svg.contentDocument.getElementById(\"Layer1e\").style.display = \"none\";\n            selectedFloor = 0;\n        }\n        else if(floor == 1)\n        {\n            svg.contentDocument.getElementById(\"LayerBG\").style.display = \"none\"; svg.contentDocument.getElementById(\"Layer1e\").style.display = \"flex\"; \n            selectedFloor = 1;\n        }\n    }\n    function clickFunction(room, event) \n    {\n        selectedRoom = room.knx.replace(\"/\", \"_\");\n        svgIcon.style.transform=\"scale(20%, 20%)\";\n        svgIcon.style.transform=\"translate(\" + (event.clientX - 110) + \"px, \" + (event.clientY - 90) + \"px)\";\n        svgIcon.contentDocument.getElementById(\"ruimteNummer\").textContent = \"Ruimte \" + room.grp.replace(\"grpRm\", \"\");\n    }\n    svg.addEventListener\n    (   \n        \"load\", function() {\n        const intervalId = setInterval(loopFunction, 30000);\n        scope = window.globalVar;\n        window.preferences = [];\n        window.currentColour = [];\n        document.getElementById(\"infoIcon\").addEventListener(\"mouseout\", function(event) { window.svgIcon.style.transform = window.svgIcon.style.transform + \" scale(0.0001%, 0.0001%)\" });\n        //toggle loop\n        svg.contentDocument.getElementById(\"selectLoop\").addEventListener(\"click\", function(event) \n        {\n            if(isLoop)\n            {\n                svg.contentDocument.getElementById(\"rectLoop\").style.fill=\"#b4113d\";\n            }\n            else\n            {\n                svg.contentDocument.getElementById(\"rectLoop\").style.fill=\"#eee\";\n            }\n            isLoop = !isLoop;\n        });\n        window.selectedFloor = 0;\n        svg.contentDocument.getElementById(\"LayerBG\").style.display = \"flex\"; svg.contentDocument.getElementById(\"Layer1e\").style.display = \"none\";\n        svgControlIcon.contentDocument.getElementById(\"ruimteNummer\").textContent = \"Alle ruimtes\";\n        svg.contentDocument.getElementById(\"expandedControlIcon\").style.display = \"none\"; svg.contentDocument.getElementById(\"miniatureControlIcon\").style.display = \"inline\"; svgControlIcon.style.display = \"none\";\n        //initialise grey colours\n        for(i = 0; i < myRooms.length; i++)\n        {\n            if(myRooms[i] != undefined)\n            {\n                currentColour[myRooms[i].knx.replace(\"/\", \"_\")] = \"#eee\";     \n            }\n        }\n        \n        //open settings\n        svg.contentDocument.getElementById(\"expandedControlIcon\").style.transition = \"opacity 200ms\";\n        svg.contentDocument.getElementById(\"miniatureControlIcon\").style.transition = \"opacity 200ms\";\n        svg.contentDocument.getElementById(\"miniatureControlIcon\").addEventListener(\"mouseover\", function(event) { svg.contentDocument.getElementById(\"expandedControlIcon\").style.display = \"inline\"; svg.contentDocument.getElementById(\"miniatureControlIcon\").style.display = \"none\"; svgControlIcon.style.display = \"inline\";});\n        svg.contentDocument.getElementById(\"expandedControlIcon\").addEventListener(\"mouseleave\", function(event) { svg.contentDocument.getElementById(\"expandedControlIcon\").style.display = \"none\"; svg.contentDocument.getElementById(\"miniatureControlIcon\").style.display = \"inline\"; svgControlIcon.style.display = \"none\";});\n        svgControlIcon.addEventListener(\"mouseover\", function(event) { svg.contentDocument.getElementById(\"expandedControlIcon\").style.display = \"inline\"; svg.contentDocument.getElementById(\"miniatureControlIcon\").style.display = \"none\"; svgControlIcon.style.display = \"inline\";});\n        svgControlIcon.addEventListener(\"mouseleave\", function(event) { svg.contentDocument.getElementById(\"expandedControlIcon\").style.display = \"none\"; svg.contentDocument.getElementById(\"miniatureControlIcon\").style.display = \"inline\"; svgControlIcon.style.display = \"none\";});\n        //selecteer ruimte\n        svg.contentDocument.getElementById(\"select1e\").addEventListener(\"click\", function(event) { selectFloor(1) } );\n        svg.contentDocument.getElementById(\"selectBG\").addEventListener(\"click\", function(event) { selectFloor(0) } );\n        //add click functions\n        //begane grond\n        svgIcon.style.transform= svgIcon.style.transform + \" scale(0.0001%, 0.0001%)\"\n        svg.contentDocument.getElementById(myRooms[1].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[1] , event); } );\n        svg.contentDocument.getElementById(myRooms[3].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[3], event); } );\n        svg.contentDocument.getElementById(myRooms[4].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[4], event); } );\n        svg.contentDocument.getElementById(myRooms[5].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[5], event); } );\n        svg.contentDocument.getElementById(myRooms[6].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[6], event); } );\n        svg.contentDocument.getElementById(myRooms[7].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[7], event); } );\n        svg.contentDocument.getElementById(myRooms[8].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[8], event); } );\n        svg.contentDocument.getElementById(myRooms[11].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[11], event); } );\n        svg.contentDocument.getElementById(myRooms[12].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[12], event); } );\n        \n        //1e verdieping\n        svg.contentDocument.getElementById(myRooms[101].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[101], event); } );\n        svg.contentDocument.getElementById(myRooms[102].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[102], event); } );\n        svg.contentDocument.getElementById(myRooms[103].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[103], event); } );\n        svg.contentDocument.getElementById(myRooms[104].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[104], event); } );\n        svg.contentDocument.getElementById(myRooms[105].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[105], event); } );\n        svg.contentDocument.getElementById(myRooms[106].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[106], event); } );\n        svg.contentDocument.getElementById(myRooms[107].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[107], event); } );\n        svg.contentDocument.getElementById(myRooms[111].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[111], event); } );\n        svg.contentDocument.getElementById(myRooms[112].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[112], event); } );\n        svg.contentDocument.getElementById(myRooms[113].grp).addEventListener(\"click\", function(event) { clickFunction(myRooms[113], event); } );\n        \n        //add mouseout functions\n        //begane grond\n        svg.contentDocument.getElementById(myRooms[1].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[1].rect).style.fill = currentColour[myRooms[1].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[3].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[3].rect).style.fill = currentColour[myRooms[3].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[4].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[4].rect).style.fill = currentColour[myRooms[4].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[5].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[5].rect).style.fill = currentColour[myRooms[5].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[6].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[6].rect).style.fill = currentColour[myRooms[6].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[7].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[7].rect).style.fill = currentColour[myRooms[7].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[8].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[8].rect).style.fill = currentColour[myRooms[8].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[11].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[11].rect).style.fill = currentColour[myRooms[11].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[12].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[12].rect).style.fill = currentColour[myRooms[12].knx.replace(\"/\", \"_\")]; } );\n        \n        //1e verdieping\n        svg.contentDocument.getElementById(myRooms[101].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[101].rect).style.fill = currentColour[myRooms[101].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[102].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[102].rect).style.fill = currentColour[myRooms[102].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[103].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[103].rect).style.fill = currentColour[myRooms[103].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[104].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[104].rect).style.fill = currentColour[myRooms[104].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[105].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[105].rect).style.fill = currentColour[myRooms[105].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[106].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[106].rect).style.fill = currentColour[myRooms[106].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[107].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[107].rect).style.fill = currentColour[myRooms[107].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[111].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[111].rect).style.fill = currentColour[myRooms[111].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[112].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[112].rect).style.fill = currentColour[myRooms[112].knx.replace(\"/\", \"_\")]; } );\n        svg.contentDocument.getElementById(myRooms[113].grp).addEventListener(\"mouseout\", function(event) { svg.contentDocument.getElementById(myRooms[113].rect).style.fill = currentColour[myRooms[113].knx.replace(\"/\", \"_\")]; } );\n       \n        //add event listeners for local control\n        tempIcon = svgIcon.contentDocument.getElementById(\"TempGrp\");\n        humIcon = svgIcon.contentDocument.getElementById(\"HumGrp\");\n        luxIcon = svgIcon.contentDocument.getElementById(\"LuxGrp\");\n        CO2Icon = svgIcon.contentDocument.getElementById(\"CO2Grp\");\n        \n        \n        tempIcon.addEventListener(\"click\", function(event) { clickQuartre(\"T\", false); });\n        tempIcon.addEventListener(\"mouseover\", function(event) { pop(-5, -5, \"out\", tempIcon); });\n        tempIcon.addEventListener(\"mouseout\", function(event) { pop(-5, -5, \"in\", tempIcon); });\n        \n        humIcon.addEventListener(\"click\", function(event) { clickQuartre(\"H\", false); });\n        humIcon.addEventListener(\"mouseover\", function(event) { pop(5, -5, \"out\", humIcon); });\n        humIcon.addEventListener(\"mouseout\", function(event) { pop(5, -5, \"in\", humIcon); });\n        \n        luxIcon.addEventListener(\"click\", function(event) { clickQuartre(\"L\", false); });\n        luxIcon.addEventListener(\"mouseover\", function(event) { pop(-5, 5, \"out\", luxIcon); });\n        luxIcon.addEventListener(\"mouseout\", function(event) { pop(-5, 5, \"in\", luxIcon); });\n        \n        CO2Icon.addEventListener(\"click\", function(event) { clickQuartre(\"C\", false); });\n        CO2Icon.addEventListener(\"mouseover\", function(event) { pop(5, 5, \"out\", CO2Icon); });\n        CO2Icon.addEventListener(\"mouseout\", function(event) { pop(5, 5, \"in\", CO2Icon); });\n        \n        // add eventlisteners for main control icon\n        \n        tempControlIcon = svgControlIcon.contentDocument.getElementById(\"TempGrp\");\n        humControlIcon = svgControlIcon.contentDocument.getElementById(\"HumGrp\");\n        luxControlIcon = svgControlIcon.contentDocument.getElementById(\"LuxGrp\");\n        CO2ControlIcon = svgControlIcon.contentDocument.getElementById(\"CO2Grp\");\n        \n        tempControlIcon.addEventListener(\"click\", function(event) { clickQuartre(\"T\", true); });\n        tempControlIcon.addEventListener(\"mouseover\", function(event) { pop(-5, -5, \"out\", tempControlIcon); });\n        tempControlIcon.addEventListener(\"mouseout\", function(event) { pop(-5, -5, \"in\", tempControlIcon); });\n        \n        humControlIcon.addEventListener(\"click\", function(event) { clickQuartre(\"H\", true); });\n        humControlIcon.addEventListener(\"mouseover\", function(event) { pop(5, -5, \"out\", humControlIcon); });\n        humControlIcon.addEventListener(\"mouseout\", function(event) { pop(5, -5, \"in\", humControlIcon); });\n        \n        luxControlIcon.addEventListener(\"click\", function(event) { clickQuartre(\"L\", true); });\n        luxControlIcon.addEventListener(\"mouseover\", function(event) { pop(-5, 5, \"out\", luxControlIcon); });\n        luxControlIcon.addEventListener(\"mouseout\", function(event) { pop(-5, 5, \"in\", luxControlIcon); });\n        \n        CO2ControlIcon.addEventListener(\"click\", function(event) { clickQuartre(\"C\", true); });\n        CO2ControlIcon.addEventListener(\"mouseover\", function(event) { pop(5, 5, \"out\", CO2ControlIcon); });\n        CO2ControlIcon.addEventListener(\"mouseout\", function(event) { pop(5, 5, \"in\", CO2ControlIcon); });\n    });\n    function knxMessage(msg, scope) \n    {\n        if(msg.knx != null)\n        {\n            if(preferences[msg.knx.destination.slice(0,3)] == \"T\" && msg.Tvalue != undefined)\n            {\n                svg.getSVGDocument().getElementById(\"rect\" + msg.knx.destination.slice(0,3)).style.fill = msg.Tcolour;   \n                svg.getSVGDocument().getElementById(\"valDisplay\" + msg.knx.destination.slice(0,3)).textContent = msg.Tvalue;\n                currentColour[msg.knx.destination.slice(0,3)] = msg.Tcolour;\n            }\n            else if(preferences[msg.knx.destination.slice(0,3)] == \"H\" && msg.Hvalue != undefined)\n            {\n                svg.getSVGDocument().getElementById(\"rect\" + msg.knx.destination.slice(0,3)).style.fill = msg.Hcolour;\n                svg.getSVGDocument().getElementById(\"valDisplay\" + msg.knx.destination.slice(0,3)).textContent = msg.Hvalue;\n                currentColour[msg.knx.destination.slice(0,3)] = msg.Hcolour;\n            }\n            else if(preferences[msg.knx.destination.slice(0,3)] == \"L\" && msg.Lvalue != undefined)\n            {\n                svg.getSVGDocument().getElementById(\"rect\" + msg.knx.destination.slice(0,3)).style.fill = msg.Lcolour;\n                svg.getSVGDocument().getElementById(\"valDisplay\" + msg.knx.destination.slice(0,3)).textContent = msg.Lvalue;\n                currentColour[msg.knx.destination.slice(0,3)] = msg.Lcolour;\n            }\n            else if(preferences[msg.knx.destination.slice(0,3)] == \"C\" && msg.Cvalue != undefined)\n            {\n                svg.getSVGDocument().getElementById(\"rect\" + msg.knx.destination.slice(0,3)).style.fill = msg.Ccolour;\n                svg.getSVGDocument().getElementById(\"valDisplay\" + msg.knx.destination.slice(0,3)).textContent = msg.Cvalue;\n                currentColour[msg.knx.destination.slice(0,3)] = msg.Ccolour;\n            }\n        }\n    }\n    (function(scope) \n    {\n        window.globalVar = scope;\n        scope.$watch('msg', function(msg) \n        {\n            if (msg) \n            {\n                knxMessage(msg, scope)\n            }\n        });\n    })\n    (scope);\n})();\n\nfunction pop(x, y, dir, localSvg) \n{\n    if(window.svg != null && localSvg != null)\n    {\n        currentTransform = new DOMMatrix(window.getComputedStyle(localSvg).getPropertyValue(\"transform\"));\n        currentTransform_outline = new DOMMatrix(window.getComputedStyle(localSvg).getPropertyValue(\"transform\"));\n        if(dir == \"in\")\n        {\n            currentTransform.e -= x;\n            currentTransform.f -= y; \n        }\n        else if(dir == \"out\")\n        {\n            currentTransform.e += x;\n            currentTransform.f += y;\n        }\n        localSvg.setAttribute('transform', currentTransform);\n    }\n}\n\n\nfunction clickQuartre(val, isMainControl)\n{\n    if(isMainControl)\n    {\n        for(i = 0; i < myRooms.length; i++)\n        {\n            if(myRooms[i] != undefined && myRooms[i].floor == selectedFloor)\n            {\n                preferences[myRooms[i].knx.replace(\"/\", \"_\")] = val;\n                scope.send({payload: myRooms[i].knx, unit: val});\n            }\n        }\n    }\n    else\n    {\n        svgIcon.style.transform= svgIcon.style.transform + \" scale(0.0001%, 0.0001%)\"\n        scope.send({payload: selectedRoom.replace(\"_\", \"/\"), unit: val});\n        preferences[selectedRoom] = val;\n    }\n}\n\n\n</script>\n<style>\n\n.freeze {\n   pointer-events: none;\n}\n.floorplan\n{\n    width: 100%;\n    height: 100%;\n    display: flex;\n    justify-content: start;\n}\n.icon\n{\n    transition: transform .2s ease-in-out;\n    position: absolute;\n    width: 20%;\n    height: 20%;\n    transform-origin: center center;\n    opacity: 85%;\n}\n.control_icon\n{\n    transition: transform .2s ease-in-out;\n    position: absolute;\n    top: 675px;\n    left: 180px;\n    width: 20%;\n    height: 20%;\n    transform-origin: center center;\n    opacity: 85%;\n}\n</style>\n<object data=\"/infoIcon.svg\" type=\"image/svg+xml\" id=\"controlInfoIcon\" class=\"control_icon\"></object>\n<object data=\"/infoIcon.svg\" type=\"image/svg+xml\" id=\"infoIcon\" class=\"icon\"></object>\n<object data=\"/vssBG.svg\" type=\"image/svg+xml\" id=\"vssSVG\" class=\"floorplan\"></object>\n",
        "storeOutMessages": false,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1030,
        "y": 2060,
        "wires": [
            [
                "03effa56113edc26"
            ]
        ]
    },
    {
        "id": "e4ad83fc24acd70c",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "processData",
        "func": "msg.knx.destination = msg.knx.destination.replaceAll(\"/\", \"_\");\n\nfunction lerpColor(a, b, c, amount) \n{\n    if(amount < 0.5)\n    {\n      amount = amount * 2\n      var ah = parseInt(a.replace(/#/g, ''), 16),\n      ar = ah >> 16, ag = ah >> 8 & 0xff, ab = ah & 0xff,\n      bh = parseInt(b.replace(/#/g, ''), 16),\n      br = bh >> 16, bg = bh >> 8 & 0xff, bb = bh & 0xff,\n      rr = ar + amount * (br - ar),\n      rg = ag + amount * (bg - ag),\n      rb = ab + amount * (bb - ab);\n    }\n    else\n    {\n      amount = (amount - 0.5) / 0.5\n      var bh = parseInt(b.replace(/#/g, ''), 16),\n      br = bh >> 16, bg = bh >> 8 & 0xff, bb = bh & 0xff,\n      ch = parseInt(c.replace(/#/g, ''), 16),\n      cr = ch >> 16, cg = ch >> 8 & 0xff, cb = ch & 0xff,\n      rr = br + amount * (cr - br),\n      rg = bg + amount * (cg - bg),\n      rb = bb + amount * (cb - bb);\n    }\n\n    return (\"#\" + ((1 << 24) + (rr << 16) + (rg << 8) + rb).toString(16).slice(1)).slice(0, 7);\n}\n\n\nif(msg.knx.destination.slice(-2) == \"_1\")\n{\n    msg.Tvalue = Math.round(msg.payload * 10) / 10 + \" °C\";\n    msg.Tcolour = lerpColor(\"#66ffff\", \"#ffff00\", \"#ff3300\", ((msg.payload - 12) / 18));\n    return msg;\n}\nelse if(msg.knx.destination.slice(-2) == \"11\")\n{\n    msg.Hvalue = Math.round(msg.payload * 10) / 10 + \" %\";\n    msg.Hcolour = lerpColor(\"ff3300\", \"#ffff00\", \"#66ffff\", ((msg.payload - 0) / 100));\n    return msg;\n}\nelse if(msg.knx.destination.slice(-2) == \"21\")\n{\n    msg.Cvalue = Math.round(msg.payload) + \" ppm\";\n    msg.Ccolour = lerpColor(\"#00ff00\", \"#ffff00\", \"#ff3300\", ((msg.payload - 200) / 1000));\n    return msg;\n}\nelse if(msg.knx.destination.slice(-2) == '41')\n{\n    msg.Lvalue = Math.round(msg.payload * 10) / 10 + \" Lux\";\n    if(msg.payload > 100){\n        msg.payload = 100;\n    }\n    msg.Lcolour = lerpColor(\"#000000\", \"#ffff00\", \"#ffffee\", ((msg.payload - 0) / 100));\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2060,
        "wires": [
            [
                "1a953d58a8e8a2a7",
                "e30f31a38984b949"
            ]
        ]
    },
    {
        "id": "12741a823a247610",
        "type": "debug",
        "z": "e7a7e61768dadc02",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 2200,
        "wires": []
    },
    {
        "id": "1a953d58a8e8a2a7",
        "type": "debug",
        "z": "e7a7e61768dadc02",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 2160,
        "wires": []
    },
    {
        "id": "03effa56113edc26",
        "type": "delay",
        "z": "e7a7e61768dadc02",
        "name": "",
        "pauseType": "rate",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1230,
        "y": 2060,
        "wires": [
            [
                "4f90790088d25dbf"
            ]
        ]
    },
    {
        "id": "c773a6e56e9cc5c8",
        "type": "switch",
        "z": "e7a7e61768dadc02",
        "name": "Unit router",
        "property": "unit",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "T",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "H",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "C",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "L",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "all",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 190,
        "y": 1800,
        "wires": [
            [
                "d7a12d9eaf16e3d6"
            ],
            [
                "a1e9e3fec670d436"
            ],
            [
                "abd0dfe3eb186f82"
            ],
            [
                "23dcecde21618d86"
            ],
            [
                "0dc997d873d82fd4",
                "9b436f4038605f30",
                "a1e9e3fec670d436",
                "23dcecde21618d86",
                "abd0dfe3eb186f82",
                "d7a12d9eaf16e3d6"
            ]
        ]
    },
    {
        "id": "cbc198bc826aa43f",
        "type": "file in",
        "z": "e7a7e61768dadc02",
        "name": "",
        "filename": "C:\\Users\\gustav.lassche\\.node-red\\projects\\Verkerk_EnergieDashboard\\defaultFolders.config",
        "filenameType": "str",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "allProps": false,
        "x": 480,
        "y": 140,
        "wires": [
            [
                "4b0286603b8e6962"
            ]
        ]
    },
    {
        "id": "4b0286603b8e6962",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "set default folder",
        "func": "global.set(\"defaultFolder\", msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "c1f27b5d5ecd5b6e",
        "type": "inject",
        "z": "e7a7e61768dadc02",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 70,
        "y": 140,
        "wires": [
            [
                "cbc198bc826aa43f"
            ]
        ]
    },
    {
        "id": "8d15bad4c169da1c",
        "type": "function",
        "z": "e7a7e61768dadc02",
        "name": "set defaultFolder",
        "func": "msg.topic = global.get(\"defaultFolder\") + \"/NominalVals.json\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 360,
        "wires": [
            [
                "7b3a2ab62cb20b3d"
            ]
        ]
    },
    {
        "id": "b1456c6040d91a11",
        "type": "ui_gauge",
        "z": "5368e8a6e61eb499",
        "name": "",
        "group": "d37fa3fb37fe02ef",
        "order": 1,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Temperature",
        "label": "C",
        "format": "{{value}}",
        "min": "10",
        "max": "30",
        "colors": [
            "#0000ff",
            "#ffff00",
            "#ff0000"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 850,
        "y": 340,
        "wires": []
    },
    {
        "id": "a1f63d8d29ca9ef9",
        "type": "http in",
        "z": "5368e8a6e61eb499",
        "name": "",
        "url": "/get-data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 380,
        "wires": [
            [
                "e18fe3862fa41721",
                "8a830f69bcd27acf",
                "edf68765cd652ecc"
            ]
        ]
    },
    {
        "id": "697118a34987f0e9",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Temp",
        "func": "msg.payload = msg.payload.temperature;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 340,
        "wires": [
            [
                "b1456c6040d91a11"
            ]
        ]
    },
    {
        "id": "2932bdfb6a52761a",
        "type": "ui_gauge",
        "z": "5368e8a6e61eb499",
        "name": "",
        "group": "d37fa3fb37fe02ef",
        "order": 2,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Humidity",
        "label": "%",
        "format": "{{value}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 840,
        "y": 380,
        "wires": []
    },
    {
        "id": "cc3a780b472b459a",
        "type": "ui_gauge",
        "z": "5368e8a6e61eb499",
        "name": "",
        "group": "d37fa3fb37fe02ef",
        "order": 3,
        "width": 0,
        "height": 0,
        "gtype": "gage",
        "title": "Light Intensity",
        "label": "Lux",
        "format": "{{value}}",
        "min": "0",
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 860,
        "y": 460,
        "wires": []
    },
    {
        "id": "5cb367eca3dacd89",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Humid",
        "func": "msg.payload = msg.payload.humidity;\n\n//msg.payload = (Math.exp(4302.645*6 / (28+243.5) * (28+243.5-6)) * (28+273.15-6)*50) / (273.15+28);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 380,
        "wires": [
            [
                "2932bdfb6a52761a",
                "da93cdac9c5d1554"
            ]
        ]
    },
    {
        "id": "d96e089cdbebcbc1",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Movement",
        "func": "if(msg.payload.isMovement == \"1\")\n{\n    msg.payload = \"Movement detected!\";\n    msg.topic = \"Movement\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 420,
        "wires": [
            [
                "e196bfd27a4fdf1e",
                "69ce5caaea0c8286"
            ]
        ]
    },
    {
        "id": "876eabc34d47f2e3",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Lux",
        "func": "msg.payload = msg.payload.luxValue;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 460,
        "wires": [
            [
                "cc3a780b472b459a"
            ]
        ]
    },
    {
        "id": "8a830f69bcd27acf",
        "type": "http response",
        "z": "5368e8a6e61eb499",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 400,
        "y": 340,
        "wires": []
    },
    {
        "id": "e196bfd27a4fdf1e",
        "type": "delay",
        "z": "5368e8a6e61eb499",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 860,
        "y": 420,
        "wires": [
            [
                "83955c0abacaf0db"
            ]
        ]
    },
    {
        "id": "40995af96eca5ff8",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Sound",
        "func": "if(msg.payload.isSound == \"1\")\n{\n    msg.payload = \"Sound detected!\";\n    msg.topic = \"Sound\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 300,
        "wires": [
            [
                "7f557820260f07df"
            ]
        ]
    },
    {
        "id": "7f557820260f07df",
        "type": "delay",
        "z": "5368e8a6e61eb499",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": true,
        "allowrate": false,
        "outputs": 1,
        "x": 850,
        "y": 300,
        "wires": [
            [
                "c7a85a2af80e6aab"
            ]
        ]
    },
    {
        "id": "7a346dd6e6ad0604",
        "type": "ui_chart",
        "z": "5368e8a6e61eb499",
        "name": "",
        "group": "85bfc516b6fff0d0",
        "order": 1,
        "width": 0,
        "height": 0,
        "label": "",
        "chartType": "line",
        "legend": "true",
        "xformat": "HH:mm",
        "interpolate": "step",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "1000",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#ff0000",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1210,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "ebcb590598d60b49",
        "type": "ui_button",
        "z": "5368e8a6e61eb499",
        "name": "",
        "group": "85bfc516b6fff0d0",
        "order": 2,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "[]",
        "payloadType": "json",
        "topic": "topic",
        "topicType": "msg",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "7a346dd6e6ad0604"
            ]
        ]
    },
    {
        "id": "c7a85a2af80e6aab",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Sound",
        "func": "if(msg.topic == \"Sound\")\n{\n    msg.payload = 1;\n}\nelse\n{\n    msg.payload = 0;\n}\nmsg.topic = \"Sound\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 340,
        "wires": [
            [
                "7a346dd6e6ad0604"
            ]
        ]
    },
    {
        "id": "83955c0abacaf0db",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Movement",
        "func": "if(msg.topic == \"Movement\")\n{\n    msg.payload = 1;\n}\nelse\n{\n    msg.payload = 0;\n}\nmsg.topic = \"Movement\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 380,
        "wires": [
            [
                "7a346dd6e6ad0604"
            ]
        ]
    },
    {
        "id": "d220cbfe6b791a36",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Signal",
        "func": "msg.payload = ((Math.abs(msg.payload.RSSI) * -1.8) + 163).toFixed(0);\nif(msg.payload > 99)\n{\n    msg.payload = 100;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 500,
        "wires": [
            [
                "86b029ded0a2347f"
            ]
        ]
    },
    {
        "id": "86b029ded0a2347f",
        "type": "ui_gauge",
        "z": "5368e8a6e61eb499",
        "name": "",
        "group": "b279ac3a27a8f877",
        "order": 3,
        "width": "0",
        "height": "0",
        "gtype": "gage",
        "title": "WiFi Signal",
        "label": "%",
        "format": "{{value}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#b30000",
            "#e6e600",
            "#00b500"
        ],
        "seg1": "",
        "seg2": "",
        "className": "",
        "x": 850,
        "y": 500,
        "wires": []
    },
    {
        "id": "4781f4413a123cdd",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "BTList",
        "func": "msg.topic = msg.payload.deviceID;\nmsg.payload = msg.payload.btList;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 540,
        "wires": [
            [
                "2d817127a550580f"
            ]
        ]
    },
    {
        "id": "2d817127a550580f",
        "type": "split",
        "z": "5368e8a6e61eb499",
        "name": "",
        "splt": "p",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 540,
        "wires": [
            [
                "c9bf465175518842"
            ]
        ]
    },
    {
        "id": "8765f2f29ab8b73f",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Update register",
        "func": "var today = new Date();\nvar locatie = new Object();\ngebruikers = global.get(\"gebruikers\");\nlocatie.ruimte = \"onbekend\";\nlocatie.tijdstip = today.getHours() + \":\" + today.getMinutes() + \":\" + today.getSeconds();\n\nif(msg.topic == \"44:17:93:F9:5F:0C\")\n{\n    locatie.ruimte = \"Kantoor\";\n}\nelse if(msg.topic == \"44:17:93:F9:55:BC\")\n{\n    locatie.ruimte = \"Koffie Automaat\";\n}\ngebruikers[msg.payload] = locatie;\n\nglobal.set(\"gebruikers\", gebruikers);\nmsg.payload = gebruikers;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1040,
        "y": 540,
        "wires": [
            [
                "b5a3a815ab80ce40",
                "88eb9eb8be64b7d7"
            ]
        ]
    },
    {
        "id": "b5a3a815ab80ce40",
        "type": "debug",
        "z": "5368e8a6e61eb499",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1220,
        "y": 580,
        "wires": []
    },
    {
        "id": "88eb9eb8be64b7d7",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Person",
        "func": "var obj = msg.payload;\nObject.keys(obj).forEach(key => {\n    if(key == \"110\")\n    {\n        msg.topic = \"Wim\";\n    }\n    else if(key == \"111\")\n    {\n        msg.topic = \"Gustav\";\n    }\n    else if(key == \"112\")\n    {\n        msg.topic = \"Erik\";\n    }\n    else\n    {\n        msg.topic = \"Onbekende gebruiker\";\n    }\n    msg.payload = obj[key].ruimte + \", \" + obj[key].tijdstip;\n});\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 540,
        "wires": [
            [
                "0edeb678a652075b"
            ]
        ]
    },
    {
        "id": "893812c857b65271",
        "type": "ui_text",
        "z": "5368e8a6e61eb499",
        "group": "cc191a97858a5cf5",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Wim",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 1570,
        "y": 500,
        "wires": []
    },
    {
        "id": "0edeb678a652075b",
        "type": "switch",
        "z": "5368e8a6e61eb499",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": " Wim",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Gustav",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Erik",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 1370,
        "y": 540,
        "wires": [
            [
                "893812c857b65271"
            ],
            [
                "8c77e8cf37638171"
            ],
            [
                "180dc70ccb90f625"
            ]
        ]
    },
    {
        "id": "8c77e8cf37638171",
        "type": "ui_text",
        "z": "5368e8a6e61eb499",
        "group": "cc191a97858a5cf5",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Gustav",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 1580,
        "y": 540,
        "wires": []
    },
    {
        "id": "180dc70ccb90f625",
        "type": "ui_text",
        "z": "5368e8a6e61eb499",
        "group": "cc191a97858a5cf5",
        "order": 0,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Erik",
        "format": "{{msg.payload}}",
        "layout": "row-center",
        "className": "",
        "x": 1570,
        "y": 580,
        "wires": []
    },
    {
        "id": "c9bf465175518842",
        "type": "debug",
        "z": "5368e8a6e61eb499",
        "name": "debug 2",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 600,
        "wires": []
    },
    {
        "id": "ac60ebe83ea95383",
        "type": "ui_dropdown",
        "z": "5368e8a6e61eb499",
        "name": "",
        "label": "Selecteer sensor",
        "tooltip": "",
        "place": "Select option",
        "group": "85bfc516b6fff0d0",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "Sensor 1",
                "value": "1",
                "type": "str"
            },
            {
                "label": "Sensor 2",
                "value": "2",
                "type": "str"
            },
            {
                "label": "Sensor 3",
                "value": "3",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 210,
        "y": 420,
        "wires": [
            [
                "a289aa2557b2e6e6",
                "0b8008bb1c8c5795"
            ]
        ]
    },
    {
        "id": "a289aa2557b2e6e6",
        "type": "change",
        "z": "5368e8a6e61eb499",
        "name": "",
        "rules": [
            {
                "t": "set",
                "p": "currentDevice",
                "pt": "global",
                "to": "payload",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 450,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e18fe3862fa41721",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "CurrentDevice?",
        "func": "if(global.get(\"currentDevice\") == msg.payload.deviceID)\n{\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 380,
        "wires": [
            [
                "40995af96eca5ff8",
                "697118a34987f0e9",
                "5cb367eca3dacd89",
                "d96e089cdbebcbc1",
                "876eabc34d47f2e3",
                "d220cbfe6b791a36",
                "4781f4413a123cdd",
                "c7a85a2af80e6aab",
                "83955c0abacaf0db"
            ]
        ]
    },
    {
        "id": "0b8008bb1c8c5795",
        "type": "link out",
        "z": "5368e8a6e61eb499",
        "name": "link out 1",
        "mode": "link",
        "links": [
            "9dfbf32ec0f6915a"
        ],
        "x": 355,
        "y": 420,
        "wires": []
    },
    {
        "id": "edf68765cd652ecc",
        "type": "debug",
        "z": "5368e8a6e61eb499",
        "name": "debug 4",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 400,
        "y": 500,
        "wires": []
    },
    {
        "id": "69ce5caaea0c8286",
        "type": "debug",
        "z": "5368e8a6e61eb499",
        "name": "debug 5",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 460,
        "wires": []
    },
    {
        "id": "da93cdac9c5d1554",
        "type": "debug",
        "z": "5368e8a6e61eb499",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 920,
        "y": 700,
        "wires": []
    },
    {
        "id": "3ed9786c3dab45f3",
        "type": "inject",
        "z": "5368e8a6e61eb499",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 400,
        "y": 300,
        "wires": [
            [
                "5cb367eca3dacd89"
            ]
        ]
    },
    {
        "id": "d7f977f113658f55",
        "type": "function",
        "z": "5368e8a6e61eb499",
        "name": "Reset Graph",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 260,
        "wires": [
            [
                "7a346dd6e6ad0604"
            ]
        ]
    },
    {
        "id": "9dfbf32ec0f6915a",
        "type": "link in",
        "z": "5368e8a6e61eb499",
        "name": "link in 1",
        "links": [
            "0b8008bb1c8c5795"
        ],
        "x": 925,
        "y": 260,
        "wires": [
            [
                "d7f977f113658f55"
            ]
        ]
    }
]